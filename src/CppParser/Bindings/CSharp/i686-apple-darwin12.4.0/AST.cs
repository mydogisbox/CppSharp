//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum TypeKind
            {
                Tag = 0,
                Array = 1,
                Function = 2,
                Pointer = 3,
                MemberPointer = 4,
                Typedef = 5,
                Attributed = 6,
                Decayed = 7,
                TemplateSpecialization = 8,
                TemplateParameter = 9,
                TemplateParameterSubstitution = 10,
                InjectedClassName = 11,
                DependentName = 12,
                PackExpansion = 13,
                Builtin = 14
            }

            public enum DeclarationKind
            {
                DeclarationContext = 0,
                Typedef = 1,
                Parameter = 2,
                Function = 3,
                Method = 4,
                Enumeration = 5,
                EnumerationItem = 6,
                Variable = 7,
                Field = 8,
                AccessSpecifier = 9,
                Class = 10,
                Template = 11,
                ClassTemplate = 12,
                ClassTemplateSpecialization = 13,
                ClassTemplatePartialSpecialization = 14,
                FunctionTemplate = 15,
                Namespace = 16,
                PreprocessedEntity = 17,
                MacroDefinition = 18,
                MacroExpansion = 19,
                TranslationUnit = 20,
                Friend = 21
            }

            public enum AccessSpecifier
            {
                Private = 0,
                Protected = 1,
                Public = 2
            }

            public enum CXXMethodKind
            {
                Normal = 0,
                Constructor = 1,
                Destructor = 2,
                Conversion = 3,
                Operator = 4,
                UsingDirective = 5
            }

            public enum CXXOperatorKind
            {
                None = 0,
                New = 1,
                Delete = 2,
                Array_New = 3,
                Array_Delete = 4,
                Plus = 5,
                Minus = 6,
                Star = 7,
                Slash = 8,
                Percent = 9,
                Caret = 10,
                Amp = 11,
                Pipe = 12,
                Tilde = 13,
                Exclaim = 14,
                Equal = 15,
                Less = 16,
                Greater = 17,
                PlusEqual = 18,
                MinusEqual = 19,
                StarEqual = 20,
                SlashEqual = 21,
                PercentEqual = 22,
                CaretEqual = 23,
                AmpEqual = 24,
                PipeEqual = 25,
                LessLess = 26,
                GreaterGreater = 27,
                LessLessEqual = 28,
                GreaterGreaterEqual = 29,
                EqualEqual = 30,
                ExclaimEqual = 31,
                LessEqual = 32,
                GreaterEqual = 33,
                AmpAmp = 34,
                PipePipe = 35,
                PlusPlus = 36,
                MinusMinus = 37,
                Comma = 38,
                ArrowStar = 39,
                Arrow = 40,
                Call = 41,
                Subscript = 42,
                Conditional = 43
            }

            public enum CallingConvention
            {
                Default = 0,
                C = 1,
                StdCall = 2,
                ThisCall = 3,
                FastCall = 4,
                Unknown = 5
            }

            public enum StatementClass
            {
                Any = 0,
                BinaryOperator = 1,
                DeclRefExprClass = 2,
                CXXConstructExprClass = 3,
                CXXOperatorCallExpr = 4,
                ImplicitCastExpr = 5,
                ExplicitCastExpr = 6
            }

            public enum TemplateSpecializationKind
            {
                Undeclared = 0,
                ImplicitInstantiation = 1,
                ExplicitSpecialization = 2,
                ExplicitInstantiationDeclaration = 3,
                ExplicitInstantiationDefinition = 4
            }

            public enum CppAbi
            {
                Itanium = 0,
                Microsoft = 1,
                ARM = 2,
                iOS = 3,
                iOS64 = 4
            }

            public enum VTableComponentKind
            {
                VCallOffset = 0,
                VBaseOffset = 1,
                OffsetToTop = 2,
                RTTI = 3,
                FunctionPointer = 4,
                CompleteDtorPointer = 5,
                DeletingDtorPointer = 6,
                UnusedFunctionPointer = 7
            }

            public enum PrimitiveType
            {
                Null = 0,
                Void = 1,
                Bool = 2,
                WideChar = 3,
                Char = 4,
                UChar = 5,
                Short = 6,
                UShort = 7,
                Int = 8,
                UInt = 9,
                Long = 10,
                ULong = 11,
                LongLong = 12,
                ULongLong = 13,
                Float = 14,
                Double = 15,
                IntPtr = 16
            }

            public enum RawCommentKind
            {
                Invalid = 0,
                OrdinaryBCPL = 1,
                OrdinaryC = 2,
                BCPLSlash = 3,
                BCPLExcl = 4,
                JavaDoc = 5,
                Qt = 6,
                Merged = 7
            }

            public enum CommentKind
            {
                FullComment = 0,
                BlockContentComment = 1,
                BlockCommandComment = 2,
                ParamCommandComment = 3,
                TParamCommandComment = 4,
                VerbatimBlockComment = 5,
                VerbatimLineComment = 6,
                ParagraphComment = 7,
                HTMLTagComment = 8,
                HTMLStartTagComment = 9,
                HTMLEndTagComment = 10,
                TextComment = 11,
                InlineContentComment = 12,
                InlineCommandComment = 13,
                VerbatimBlockLineComment = 14
            }

            public enum MacroLocation
            {
                Unknown = 0,
                ClassHead = 1,
                ClassBody = 2,
                FunctionHead = 3,
                FunctionParameters = 4,
                FunctionBody = 5
            }

            public enum ArchType
            {
                UnknownArch = 0,
                x86 = 1,
                x86_64 = 2
            }

            public unsafe partial class Type : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST4TypeC2ENS1_8TypeKindE")]
                    internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.TypeKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST4TypeC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Type __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Type((Type.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Type __CreateInstance(Type.Internal native, bool skipVTables = false)
                {
                    return new Type(native, skipVTables);
                }

                private static Type.Internal* __CopyValue(Type.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.Type.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Type.Internal*) ret;
                }

                private Type(Type.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Type(Type.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Type(CppSharp.Parser.AST.TypeKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = kind;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
                }

                public Type(CppSharp.Parser.AST.Type _0)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.TypeKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDependent != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDependent = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TypeQualifiers : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 3)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public byte IsConst;

                    [FieldOffset(1)]
                    public byte IsVolatile;

                    [FieldOffset(2)]
                    public byte IsRestrict;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14TypeQualifiersC2ERKS2_")]
                    internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static TypeQualifiers __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TypeQualifiers((TypeQualifiers.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TypeQualifiers __CreateInstance(TypeQualifiers.Internal native, bool skipVTables = false)
                {
                    return new TypeQualifiers(native, skipVTables);
                }

                private static TypeQualifiers.Internal* __CopyValue(TypeQualifiers.Internal native)
                {
                    var ret = (TypeQualifiers.Internal*) Marshal.AllocHGlobal(3);
                    *ret = native;
                    return ret;
                }

                private TypeQualifiers(TypeQualifiers.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypeQualifiers(TypeQualifiers.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeQualifiers(CppSharp.Parser.AST.TypeQualifiers _0)
                {
                    __Instance = Marshal.AllocHGlobal(3);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((TypeQualifiers.Internal*) __Instance) = *((TypeQualifiers.Internal*) _0.__Instance);
                }

                public TypeQualifiers()
                {
                    __Instance = Marshal.AllocHGlobal(3);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.TypeQualifiers __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public bool IsConst
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsConst != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsConst = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsVolatile
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVolatile != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVolatile = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsRestrict
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsRestrict != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsRestrict = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class QualifiedType : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Type;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.TypeQualifiers.Internal Qualifiers;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13QualifiedTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13QualifiedTypeC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static QualifiedType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new QualifiedType((QualifiedType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static QualifiedType __CreateInstance(QualifiedType.Internal native, bool skipVTables = false)
                {
                    return new QualifiedType(native, skipVTables);
                }

                private static QualifiedType.Internal* __CopyValue(QualifiedType.Internal native)
                {
                    var ret = (QualifiedType.Internal*) Marshal.AllocHGlobal(8);
                    *ret = native;
                    return ret;
                }

                private QualifiedType(QualifiedType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected QualifiedType(QualifiedType.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public QualifiedType()
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public QualifiedType(CppSharp.Parser.AST.QualifiedType _0)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((QualifiedType.Internal*) __Instance) = *((QualifiedType.Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.QualifiedType __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        CppSharp.Parser.AST.Type __result0;
                        if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                            __result0 = (CppSharp.Parser.AST.Type) CppSharp.Parser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                        else __result0 = CppSharp.Parser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TypeQualifiers Qualifiers
                {
                    get
                    {
                        return CppSharp.Parser.AST.TypeQualifiers.__CreateInstance(((Internal*) __Instance)->Qualifiers);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Qualifiers = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.TypeQualifiers.Internal() : *(CppSharp.Parser.AST.TypeQualifiers.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TagType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST7TagTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST7TagTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TagType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TagType((TagType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TagType __CreateInstance(TagType.Internal native, bool skipVTables = false)
                {
                    return new TagType(native, skipVTables);
                }

                private static TagType.Internal* __CopyValue(TagType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.TagType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TagType.Internal*) ret;
                }

                private TagType(TagType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TagType(TagType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TagType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TagType(CppSharp.Parser.AST.TagType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ArrayType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.ArrayType.ArraySize SizeType;

                    [FieldOffset(20)]
                    public int Size;

                    [FieldOffset(24)]
                    public int ElementSize;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9ArrayTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9ArrayTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArraySize
                {
                    Constant = 0,
                    Variable = 1,
                    Dependent = 2,
                    Incomplete = 3
                }

                public static new ArrayType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ArrayType((ArrayType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ArrayType __CreateInstance(ArrayType.Internal native, bool skipVTables = false)
                {
                    return new ArrayType(native, skipVTables);
                }

                private static ArrayType.Internal* __CopyValue(ArrayType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.ArrayType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ArrayType.Internal*) ret;
                }

                private ArrayType(ArrayType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ArrayType(ArrayType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ArrayType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ArrayType(CppSharp.Parser.AST.ArrayType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.ArrayType.ArraySize SizeType
                {
                    get
                    {
                        return ((Internal*) __Instance)->SizeType;
                    }

                    set
                    {
                        ((Internal*) __Instance)->SizeType = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        return ((Internal*) __Instance)->Size;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Size = value;
                    }
                }

                public int ElementSize
                {
                    get
                    {
                        return ((Internal*) __Instance)->ElementSize;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ElementSize = value;
                    }
                }
            }

            public unsafe partial class FunctionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType13getParametersEj")]
                    internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType13addParametersERPNS1_9ParameterE")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType15clearParametersEv")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType18getParametersCountEv")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                public static new FunctionType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new FunctionType((FunctionType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static FunctionType __CreateInstance(FunctionType.Internal native, bool skipVTables = false)
                {
                    return new FunctionType(native, skipVTables);
                }

                private static FunctionType.Internal* __CopyValue(FunctionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.FunctionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionType.Internal*) ret;
                }

                private FunctionType(FunctionType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionType(FunctionType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionType(CppSharp.Parser.AST.FunctionType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Parameter getParameters(uint i)
                {
                    var __ret = Internal.getParameters_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Parameter __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Parameter) CppSharp.Parser.AST.Parameter.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                    return __result0;
                }

                public void addParameters(CppSharp.Parser.AST.Parameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0((__Instance + __PointerAdjustment));
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ReturnType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        return ((Internal*) __Instance)->CallingConvention;
                    }

                    set
                    {
                        ((Internal*) __Instance)->CallingConvention = value;
                    }
                }
            }

            public unsafe partial class PointerType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedPointee;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.PointerType.TypeModifier Modifier;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11PointerTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11PointerTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum TypeModifier
                {
                    Value = 0,
                    Pointer = 1,
                    LVReference = 2,
                    RVReference = 3
                }

                public static new PointerType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new PointerType((PointerType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static PointerType __CreateInstance(PointerType.Internal native, bool skipVTables = false)
                {
                    return new PointerType(native, skipVTables);
                }

                private static PointerType.Internal* __CopyValue(PointerType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.PointerType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PointerType.Internal*) ret;
                }

                private PointerType(PointerType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PointerType(PointerType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PointerType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PointerType(CppSharp.Parser.AST.PointerType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedPointee
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedPointee);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedPointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.PointerType.TypeModifier Modifier
                {
                    get
                    {
                        return ((Internal*) __Instance)->Modifier;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Modifier = value;
                    }
                }
            }

            public unsafe partial class MemberPointerType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17MemberPointerTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17MemberPointerTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new MemberPointerType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new MemberPointerType((MemberPointerType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static MemberPointerType __CreateInstance(MemberPointerType.Internal native, bool skipVTables = false)
                {
                    return new MemberPointerType(native, skipVTables);
                }

                private static MemberPointerType.Internal* __CopyValue(MemberPointerType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.MemberPointerType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MemberPointerType.Internal*) ret;
                }

                private MemberPointerType(MemberPointerType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MemberPointerType(MemberPointerType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MemberPointerType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MemberPointerType(CppSharp.Parser.AST.MemberPointerType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Pointee);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TypedefType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TypedefType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TypedefType((TypedefType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TypedefType __CreateInstance(TypedefType.Internal native, bool skipVTables = false)
                {
                    return new TypedefType(native, skipVTables);
                }

                private static TypedefType.Internal* __CopyValue(TypedefType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.TypedefType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TypedefType.Internal*) ret;
                }

                private TypedefType(TypedefType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypedefType(TypedefType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypedefType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypedefType(CppSharp.Parser.AST.TypedefType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TypedefDecl Declaration
                {
                    get
                    {
                        CppSharp.Parser.AST.TypedefDecl __result0;
                        if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                            __result0 = (CppSharp.Parser.AST.TypedefDecl) CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                        else __result0 = CppSharp.Parser.AST.TypedefDecl.__CreateInstance(((Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class AttributedType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Modified;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Equivalent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14AttributedTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14AttributedTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new AttributedType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new AttributedType((AttributedType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static AttributedType __CreateInstance(AttributedType.Internal native, bool skipVTables = false)
                {
                    return new AttributedType(native, skipVTables);
                }

                private static AttributedType.Internal* __CopyValue(AttributedType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    CppSharp.Parser.AST.AttributedType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (AttributedType.Internal*) ret;
                }

                private AttributedType(AttributedType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected AttributedType(AttributedType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public AttributedType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public AttributedType(CppSharp.Parser.AST.AttributedType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType Modified
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Modified);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Modified = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Equivalent
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Equivalent);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Equivalent = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class DecayedType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Decayed;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Original;

                    [FieldOffset(24)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11DecayedTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11DecayedTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new DecayedType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new DecayedType((DecayedType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static DecayedType __CreateInstance(DecayedType.Internal native, bool skipVTables = false)
                {
                    return new DecayedType(native, skipVTables);
                }

                private static DecayedType.Internal* __CopyValue(DecayedType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.DecayedType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DecayedType.Internal*) ret;
                }

                private DecayedType(DecayedType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DecayedType(DecayedType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DecayedType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public DecayedType(CppSharp.Parser.AST.DecayedType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType Decayed
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Decayed);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Decayed = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Original
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Original);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Original = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Pointee);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TemplateArgument : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Type;

                    [FieldOffset(12)]
                    public global::System.IntPtr Declaration;

                    [FieldOffset(16)]
                    public int Integral;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16TemplateArgumentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16TemplateArgumentC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArgumentKind
                {
                    Type = 0,
                    Declaration = 1,
                    NullPtr = 2,
                    Integral = 3,
                    Template = 4,
                    TemplateExpansion = 5,
                    Expression = 6,
                    Pack = 7
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static TemplateArgument __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TemplateArgument((TemplateArgument.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TemplateArgument __CreateInstance(TemplateArgument.Internal native, bool skipVTables = false)
                {
                    return new TemplateArgument(native, skipVTables);
                }

                private static TemplateArgument.Internal* __CopyValue(TemplateArgument.Internal native)
                {
                    var ret = (TemplateArgument.Internal*) Marshal.AllocHGlobal(20);
                    *ret = native;
                    return ret;
                }

                private TemplateArgument(TemplateArgument.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateArgument(TemplateArgument.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateArgument()
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateArgument(CppSharp.Parser.AST.TemplateArgument _0)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((TemplateArgument.Internal*) __Instance) = *((TemplateArgument.Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.TemplateArgument __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Type
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Type);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public int Integral
                {
                    get
                    {
                        return ((Internal*) __Instance)->Integral;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Integral = value;
                    }
                }
            }

            public unsafe partial class TemplateSpecializationType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(20)]
                    public global::System.IntPtr Template;

                    [FieldOffset(24)]
                    public global::System.IntPtr Desugared;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType12getArgumentsEj")]
                    internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType12addArgumentsERNS1_16TemplateArgumentE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new TemplateSpecializationType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TemplateSpecializationType((TemplateSpecializationType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TemplateSpecializationType __CreateInstance(TemplateSpecializationType.Internal native, bool skipVTables = false)
                {
                    return new TemplateSpecializationType(native, skipVTables);
                }

                private static TemplateSpecializationType.Internal* __CopyValue(TemplateSpecializationType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.TemplateSpecializationType.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (TemplateSpecializationType.Internal*) ret;
                }

                private TemplateSpecializationType(TemplateSpecializationType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateSpecializationType(TemplateSpecializationType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateSpecializationType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateSpecializationType(CppSharp.Parser.AST.TemplateSpecializationType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Template Template
                {
                    get
                    {
                        CppSharp.Parser.AST.Template __result0;
                        if (((Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Template.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Template))
                            __result0 = (CppSharp.Parser.AST.Template) CppSharp.Parser.AST.Template.NativeToManagedMap[((Internal*) __Instance)->Template];
                        else __result0 = CppSharp.Parser.AST.Template.__CreateInstance(((Internal*) __Instance)->Template);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Type Desugared
                {
                    get
                    {
                        CppSharp.Parser.AST.Type __result0;
                        if (((Internal*) __Instance)->Desugared == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Desugared))
                            __result0 = (CppSharp.Parser.AST.Type) CppSharp.Parser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Desugared];
                        else __result0 = CppSharp.Parser.AST.Type.__CreateInstance(((Internal*) __Instance)->Desugared);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class TemplateParameter : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(12)]
                    public byte IsTypeParameter;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK8CppSharp9CppParser3AST17TemplateParametereqERKS2_")]
                    [return: MarshalAsAttribute(UnmanagedType.I1)]
                    internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr param);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameter7getNameEv")]
                    internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameter7setNameEPKc")]
                    internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateParameter> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateParameter>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static TemplateParameter __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TemplateParameter((TemplateParameter.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TemplateParameter __CreateInstance(TemplateParameter.Internal native, bool skipVTables = false)
                {
                    return new TemplateParameter(native, skipVTables);
                }

                private static TemplateParameter.Internal* __CopyValue(TemplateParameter.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.TemplateParameter.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (TemplateParameter.Internal*) ret;
                }

                private TemplateParameter(TemplateParameter.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameter(TemplateParameter.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameter()
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateParameter(CppSharp.Parser.AST.TemplateParameter _0)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.TemplateParameter __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public static bool operator !=(CppSharp.Parser.AST.TemplateParameter __op, CppSharp.Parser.AST.TemplateParameter param)
                {
                    return !(__op == param);
                }

                public static bool operator ==(CppSharp.Parser.AST.TemplateParameter __op, CppSharp.Parser.AST.TemplateParameter param)
                {
                    bool __opNull = ReferenceEquals(__op, null);
                    bool paramNull = ReferenceEquals(param, null);
                    if (__opNull || paramNull)
                        return __opNull && paramNull;
                    var arg0 = __op.__Instance;
                    var arg1 = param.__Instance;
                    var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                    return __ret;
                }

                public override bool Equals(object obj)
                {
                    return this == obj as TemplateParameter;
                }

                public override int GetHashCode()
                {
                    if (__Instance == global::System.IntPtr.Zero)
                        return global::System.IntPtr.Zero.GetHashCode();
                    return (*(Internal*) __Instance).GetHashCode();
                }

                public string Name
                {
                    get
                    {
                        var __ret = Internal.getName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public bool IsTypeParameter
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsTypeParameter != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsTypeParameter = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TemplateParameterType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.TemplateParameter.Internal Parameter;

                    [FieldOffset(24)]
                    public uint Depth;

                    [FieldOffset(28)]
                    public uint Index;

                    [FieldOffset(32)]
                    public byte IsParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new TemplateParameterType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TemplateParameterType((TemplateParameterType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TemplateParameterType __CreateInstance(TemplateParameterType.Internal native, bool skipVTables = false)
                {
                    return new TemplateParameterType(native, skipVTables);
                }

                private static TemplateParameterType.Internal* __CopyValue(TemplateParameterType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(36);
                    CppSharp.Parser.AST.TemplateParameterType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TemplateParameterType.Internal*) ret;
                }

                private TemplateParameterType(TemplateParameterType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameterType(TemplateParameterType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameterType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateParameterType(CppSharp.Parser.AST.TemplateParameterType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TemplateParameter Parameter
                {
                    get
                    {
                        return CppSharp.Parser.AST.TemplateParameter.__CreateInstance(((Internal*) __Instance)->Parameter);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Parameter = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.TemplateParameter.Internal() : *(CppSharp.Parser.AST.TemplateParameter.Internal*) (value.__Instance);
                    }
                }

                public uint Depth
                {
                    get
                    {
                        return ((Internal*) __Instance)->Depth;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Depth = value;
                    }
                }

                public uint Index
                {
                    get
                    {
                        return ((Internal*) __Instance)->Index;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Index = value;
                    }
                }

                public bool IsParameterPack
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsParameterPack != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsParameterPack = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TemplateParameterSubstitutionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Replacement;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST33TemplateParameterSubstitutionTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST33TemplateParameterSubstitutionTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TemplateParameterSubstitutionType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TemplateParameterSubstitutionType((TemplateParameterSubstitutionType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TemplateParameterSubstitutionType __CreateInstance(TemplateParameterSubstitutionType.Internal native, bool skipVTables = false)
                {
                    return new TemplateParameterSubstitutionType(native, skipVTables);
                }

                private static TemplateParameterSubstitutionType.Internal* __CopyValue(TemplateParameterSubstitutionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.TemplateParameterSubstitutionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TemplateParameterSubstitutionType.Internal*) ret;
                }

                private TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameterSubstitutionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateParameterSubstitutionType(CppSharp.Parser.AST.TemplateParameterSubstitutionType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType Replacement
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Replacement);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Replacement = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class InjectedClassNameType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr TemplateSpecialization;

                    [FieldOffset(12)]
                    public global::System.IntPtr Class;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST21InjectedClassNameTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST21InjectedClassNameTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new InjectedClassNameType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new InjectedClassNameType((InjectedClassNameType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static InjectedClassNameType __CreateInstance(InjectedClassNameType.Internal native, bool skipVTables = false)
                {
                    return new InjectedClassNameType(native, skipVTables);
                }

                private static InjectedClassNameType.Internal* __CopyValue(InjectedClassNameType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.InjectedClassNameType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (InjectedClassNameType.Internal*) ret;
                }

                private InjectedClassNameType(InjectedClassNameType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InjectedClassNameType(InjectedClassNameType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InjectedClassNameType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InjectedClassNameType(CppSharp.Parser.AST.InjectedClassNameType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TemplateSpecializationType TemplateSpecialization
                {
                    get
                    {
                        CppSharp.Parser.AST.TemplateSpecializationType __result0;
                        if (((Internal*) __Instance)->TemplateSpecialization == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.TemplateSpecializationType.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplateSpecialization))
                            __result0 = (CppSharp.Parser.AST.TemplateSpecializationType) CppSharp.Parser.AST.TemplateSpecializationType.NativeToManagedMap[((Internal*) __Instance)->TemplateSpecialization];
                        else __result0 = CppSharp.Parser.AST.TemplateSpecializationType.__CreateInstance(((Internal*) __Instance)->TemplateSpecialization);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->TemplateSpecialization = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        CppSharp.Parser.AST.Class __result0;
                        if (((Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Class))
                            __result0 = (CppSharp.Parser.AST.Class) CppSharp.Parser.AST.Class.NativeToManagedMap[((Internal*) __Instance)->Class];
                        else __result0 = CppSharp.Parser.AST.Class.__CreateInstance(((Internal*) __Instance)->Class);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class DependentNameType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17DependentNameTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17DependentNameTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new DependentNameType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new DependentNameType((DependentNameType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static DependentNameType __CreateInstance(DependentNameType.Internal native, bool skipVTables = false)
                {
                    return new DependentNameType(native, skipVTables);
                }

                private static DependentNameType.Internal* __CopyValue(DependentNameType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.DependentNameType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DependentNameType.Internal*) ret;
                }

                private DependentNameType(DependentNameType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DependentNameType(DependentNameType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DependentNameType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public DependentNameType(CppSharp.Parser.AST.DependentNameType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }
            }

            public unsafe partial class PackExpansionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17PackExpansionTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17PackExpansionTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new PackExpansionType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new PackExpansionType((PackExpansionType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static PackExpansionType __CreateInstance(PackExpansionType.Internal native, bool skipVTables = false)
                {
                    return new PackExpansionType(native, skipVTables);
                }

                private static PackExpansionType.Internal* __CopyValue(PackExpansionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.PackExpansionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PackExpansionType.Internal*) ret;
                }

                private PackExpansionType(PackExpansionType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PackExpansionType(PackExpansionType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PackExpansionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PackExpansionType(CppSharp.Parser.AST.PackExpansionType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }
            }

            public unsafe partial class BuiltinType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.PrimitiveType Type;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11BuiltinTypeC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11BuiltinTypeC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new BuiltinType __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new BuiltinType((BuiltinType.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static BuiltinType __CreateInstance(BuiltinType.Internal native, bool skipVTables = false)
                {
                    return new BuiltinType(native, skipVTables);
                }

                private static BuiltinType.Internal* __CopyValue(BuiltinType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.BuiltinType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (BuiltinType.Internal*) ret;
                }

                private BuiltinType(BuiltinType.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BuiltinType(BuiltinType.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Type.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BuiltinType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BuiltinType(CppSharp.Parser.AST.BuiltinType _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.PrimitiveType Type
                {
                    get
                    {
                        return ((Internal*) __Instance)->Type;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Type = value;
                    }
                }
            }

            public unsafe partial class VTableComponent : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.VTableComponentKind Kind;

                    [FieldOffset(4)]
                    public uint Offset;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15VTableComponentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15VTableComponentC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VTableComponent __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VTableComponent((VTableComponent.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VTableComponent __CreateInstance(VTableComponent.Internal native, bool skipVTables = false)
                {
                    return new VTableComponent(native, skipVTables);
                }

                private static VTableComponent.Internal* __CopyValue(VTableComponent.Internal native)
                {
                    var ret = (VTableComponent.Internal*) Marshal.AllocHGlobal(12);
                    *ret = native;
                    return ret;
                }

                private VTableComponent(VTableComponent.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VTableComponent(VTableComponent.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableComponent()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VTableComponent(CppSharp.Parser.AST.VTableComponent _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((VTableComponent.Internal*) __Instance) = *((VTableComponent.Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.VTableComponent __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.VTableComponentKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }

                public uint Offset
                {
                    get
                    {
                        return ((Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Offset = value;
                    }
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class VTableLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout13getComponentsEj")]
                    internal static extern void getComponents_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout13addComponentsERNS1_15VTableComponentE")]
                    internal static extern void addComponents_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout15clearComponentsEv")]
                    internal static extern void clearComponents_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout18getComponentsCountEv")]
                    internal static extern uint getComponentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VTableLayout __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VTableLayout((VTableLayout.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VTableLayout __CreateInstance(VTableLayout.Internal native, bool skipVTables = false)
                {
                    return new VTableLayout(native, skipVTables);
                }

                private static VTableLayout.Internal* __CopyValue(VTableLayout.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.VTableLayout.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (VTableLayout.Internal*) ret;
                }

                private VTableLayout(VTableLayout.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VTableLayout(VTableLayout.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableLayout()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VTableLayout(CppSharp.Parser.AST.VTableLayout _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.VTableLayout __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.VTableComponent getComponents(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.VTableComponent.Internal();
                    Internal.getComponents_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.VTableComponent.__CreateInstance(__ret);
                }

                public void addComponents(CppSharp.Parser.AST.VTableComponent s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addComponents_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearComponents()
                {
                    Internal.clearComponents_0((__Instance + __PointerAdjustment));
                }

                public uint ComponentsCount
                {
                    get
                    {
                        var __ret = Internal.getComponentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VFTableInfo : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public ulong VBTableIndex;

                    [FieldOffset(8)]
                    public uint VFPtrOffset;

                    [FieldOffset(12)]
                    public uint VFPtrFullOffset;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.VTableLayout.Internal Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VFTableInfo __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VFTableInfo((VFTableInfo.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VFTableInfo __CreateInstance(VFTableInfo.Internal native, bool skipVTables = false)
                {
                    return new VFTableInfo(native, skipVTables);
                }

                private static VFTableInfo.Internal* __CopyValue(VFTableInfo.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.VFTableInfo.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (VFTableInfo.Internal*) ret;
                }

                private VFTableInfo(VFTableInfo.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VFTableInfo(VFTableInfo.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VFTableInfo()
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VFTableInfo(CppSharp.Parser.AST.VFTableInfo _0)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.VFTableInfo __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public ulong VBTableIndex
                {
                    get
                    {
                        return ((Internal*) __Instance)->VBTableIndex;
                    }

                    set
                    {
                        ((Internal*) __Instance)->VBTableIndex = value;
                    }
                }

                public uint VFPtrOffset
                {
                    get
                    {
                        return ((Internal*) __Instance)->VFPtrOffset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->VFPtrOffset = value;
                    }
                }

                public uint VFPtrFullOffset
                {
                    get
                    {
                        return ((Internal*) __Instance)->VFPtrFullOffset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->VFPtrFullOffset = value;
                    }
                }

                public CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        return CppSharp.Parser.AST.VTableLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.VTableLayout.Internal() : *(CppSharp.Parser.AST.VTableLayout.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class ClassLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CppAbi ABI;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.VTableLayout.Internal Layout;

                    [FieldOffset(28)]
                    public byte HasOwnVFPtr;

                    [FieldOffset(32)]
                    public int VBPtrOffset;

                    [FieldOffset(36)]
                    public int Alignment;

                    [FieldOffset(40)]
                    public int Size;

                    [FieldOffset(44)]
                    public int DataSize;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout11getVFTablesEj")]
                    internal static extern void getVFTables_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout11addVFTablesERNS1_11VFTableInfoE")]
                    internal static extern void addVFTables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout13clearVFTablesEv")]
                    internal static extern void clearVFTables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout16getVFTablesCountEv")]
                    internal static extern uint getVFTablesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static ClassLayout __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ClassLayout((ClassLayout.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ClassLayout __CreateInstance(ClassLayout.Internal native, bool skipVTables = false)
                {
                    return new ClassLayout(native, skipVTables);
                }

                private static ClassLayout.Internal* __CopyValue(ClassLayout.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(48);
                    CppSharp.Parser.AST.ClassLayout.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassLayout.Internal*) ret;
                }

                private ClassLayout(ClassLayout.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassLayout(ClassLayout.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassLayout()
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassLayout(CppSharp.Parser.AST.ClassLayout _0)
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.ClassLayout __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.VFTableInfo getVFTables(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.VFTableInfo.Internal();
                    Internal.getVFTables_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.VFTableInfo.__CreateInstance(__ret);
                }

                public void addVFTables(CppSharp.Parser.AST.VFTableInfo s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addVFTables_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearVFTables()
                {
                    Internal.clearVFTables_0((__Instance + __PointerAdjustment));
                }

                public uint VFTablesCount
                {
                    get
                    {
                        var __ret = Internal.getVFTablesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.CppAbi ABI
                {
                    get
                    {
                        return ((Internal*) __Instance)->ABI;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ABI = value;
                    }
                }

                public CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        return CppSharp.Parser.AST.VTableLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.VTableLayout.Internal() : *(CppSharp.Parser.AST.VTableLayout.Internal*) (value.__Instance);
                    }
                }

                public bool HasOwnVFPtr
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasOwnVFPtr != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasOwnVFPtr = (byte) (value ? 1 : 0);
                    }
                }

                public int VBPtrOffset
                {
                    get
                    {
                        return ((Internal*) __Instance)->VBPtrOffset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->VBPtrOffset = value;
                    }
                }

                public int Alignment
                {
                    get
                    {
                        return ((Internal*) __Instance)->Alignment;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Alignment = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        return ((Internal*) __Instance)->Size;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Size = value;
                    }
                }

                public int DataSize
                {
                    get
                    {
                        return ((Internal*) __Instance)->DataSize;
                    }

                    set
                    {
                        ((Internal*) __Instance)->DataSize = value;
                    }
                }
            }

            public unsafe partial class Declaration : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 92)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationC2ENS1_15DeclarationKindE")]
                    internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration23getPreprocessedEntitiesEj")]
                    internal static extern global::System.IntPtr getPreprocessedEntities_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration23addPreprocessedEntitiesERPNS1_18PreprocessedEntityE")]
                    internal static extern void addPreprocessedEntities_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration25clearPreprocessedEntitiesEv")]
                    internal static extern void clearPreprocessedEntities_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration7getNameEv")]
                    internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration7setNameEPKc")]
                    internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration12getDebugTextEv")]
                    internal static extern global::System.IntPtr getDebugText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration12setDebugTextEPKc")]
                    internal static extern void setDebugText_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration28getPreprocessedEntitiesCountEv")]
                    internal static extern uint getPreprocessedEntitiesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Declaration __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Declaration((Declaration.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Declaration __CreateInstance(Declaration.Internal native, bool skipVTables = false)
                {
                    return new Declaration(native, skipVTables);
                }

                private static Declaration.Internal* __CopyValue(Declaration.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(92);
                    CppSharp.Parser.AST.Declaration.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Declaration.Internal*) ret;
                }

                private Declaration(Declaration.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Declaration(Declaration.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Declaration(CppSharp.Parser.AST.DeclarationKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(92);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = kind;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
                }

                public Declaration(CppSharp.Parser.AST.Declaration _0)
                {
                    __Instance = Marshal.AllocHGlobal(92);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.PreprocessedEntity getPreprocessedEntities(uint i)
                {
                    var __ret = Internal.getPreprocessedEntities_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.PreprocessedEntity __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.PreprocessedEntity.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.PreprocessedEntity) CppSharp.Parser.AST.PreprocessedEntity.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.PreprocessedEntity.__CreateInstance(__ret);
                    return __result0;
                }

                public void addPreprocessedEntities(CppSharp.Parser.AST.PreprocessedEntity s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addPreprocessedEntities_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearPreprocessedEntities()
                {
                    Internal.clearPreprocessedEntities_0((__Instance + __PointerAdjustment));
                }

                public string Name
                {
                    get
                    {
                        var __ret = Internal.getName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string DebugText
                {
                    get
                    {
                        var __ret = Internal.getDebugText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setDebugText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint PreprocessedEntitiesCount
                {
                    get
                    {
                        var __ret = Internal.getPreprocessedEntitiesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.DeclarationKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        return ((Internal*) __Instance)->Access;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Access = value;
                    }
                }

                public CppSharp.Parser.AST.DeclarationContext _Namespace
                {
                    get
                    {
                        CppSharp.Parser.AST.DeclarationContext __result0;
                        if (((Internal*) __Instance)->_Namespace == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.DeclarationContext.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->_Namespace))
                            __result0 = (CppSharp.Parser.AST.DeclarationContext) CppSharp.Parser.AST.DeclarationContext.NativeToManagedMap[((Internal*) __Instance)->_Namespace];
                        else __result0 = CppSharp.Parser.AST.DeclarationContext.__CreateInstance(((Internal*) __Instance)->_Namespace);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->_Namespace = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.SourceLocation Location
                {
                    get
                    {
                        return CppSharp.Parser.SourceLocation.__CreateInstance(((Internal*) __Instance)->Location);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Location = value.__Instance;
                    }
                }

                public int LineNumberStart
                {
                    get
                    {
                        return ((Internal*) __Instance)->LineNumberStart;
                    }

                    set
                    {
                        ((Internal*) __Instance)->LineNumberStart = value;
                    }
                }

                public int LineNumberEnd
                {
                    get
                    {
                        return ((Internal*) __Instance)->LineNumberEnd;
                    }

                    set
                    {
                        ((Internal*) __Instance)->LineNumberEnd = value;
                    }
                }

                public CppSharp.Parser.AST.RawComment Comment
                {
                    get
                    {
                        CppSharp.Parser.AST.RawComment __result0;
                        if (((Internal*) __Instance)->Comment == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.RawComment.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Comment))
                            __result0 = (CppSharp.Parser.AST.RawComment) CppSharp.Parser.AST.RawComment.NativeToManagedMap[((Internal*) __Instance)->Comment];
                        else __result0 = CppSharp.Parser.AST.RawComment.__CreateInstance(((Internal*) __Instance)->Comment);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Comment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsIncomplete
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsIncomplete != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsIncomplete = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDependent != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDependent = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.Declaration CompleteDeclaration
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->CompleteDeclaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->CompleteDeclaration))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->CompleteDeclaration];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->CompleteDeclaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->CompleteDeclaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint DefinitionOrder
                {
                    get
                    {
                        return ((Internal*) __Instance)->DefinitionOrder;
                    }

                    set
                    {
                        ((Internal*) __Instance)->DefinitionOrder = value;
                    }
                }

                public global::System.IntPtr OriginalPtr
                {
                    get
                    {
                        return ((Internal*) __Instance)->OriginalPtr;
                    }

                    set
                    {
                        ((Internal*) __Instance)->OriginalPtr = value;
                    }
                }
            }

            public unsafe partial class DeclarationContext : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 204)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextC2ENS1_15DeclarationKindE")]
                    internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13getNamespacesEj")]
                    internal static extern global::System.IntPtr getNamespaces_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13addNamespacesERPNS1_9NamespaceE")]
                    internal static extern void addNamespaces_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15clearNamespacesEv")]
                    internal static extern void clearNamespaces_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext8getEnumsEj")]
                    internal static extern global::System.IntPtr getEnums_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext8addEnumsERPNS1_11EnumerationE")]
                    internal static extern void addEnums_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10clearEnumsEv")]
                    internal static extern void clearEnums_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getFunctionsEj")]
                    internal static extern global::System.IntPtr getFunctions_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addFunctionsERPNS1_8FunctionE")]
                    internal static extern void addFunctions_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearFunctionsEv")]
                    internal static extern void clearFunctions_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10getClassesEj")]
                    internal static extern global::System.IntPtr getClasses_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10addClassesERPNS1_5ClassE")]
                    internal static extern void addClasses_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12clearClassesEv")]
                    internal static extern void clearClasses_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getTemplatesEj")]
                    internal static extern global::System.IntPtr getTemplates_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addTemplatesERPNS1_8TemplateE")]
                    internal static extern void addTemplates_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearTemplatesEv")]
                    internal static extern void clearTemplates_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext11getTypedefsEj")]
                    internal static extern global::System.IntPtr getTypedefs_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext11addTypedefsERPNS1_11TypedefDeclE")]
                    internal static extern void addTypedefs_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13clearTypedefsEv")]
                    internal static extern void clearTypedefs_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getVariablesEj")]
                    internal static extern global::System.IntPtr getVariables_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addVariablesERPNS1_8VariableE")]
                    internal static extern void addVariables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearVariablesEv")]
                    internal static extern void clearVariables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10getFriendsEj")]
                    internal static extern global::System.IntPtr getFriends_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10addFriendsERPNS1_6FriendE")]
                    internal static extern void addFriends_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12clearFriendsEv")]
                    internal static extern void clearFriends_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext18getNamespacesCountEv")]
                    internal static extern uint getNamespacesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13getEnumsCountEv")]
                    internal static extern uint getEnumsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getFunctionsCountEv")]
                    internal static extern uint getFunctionsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15getClassesCountEv")]
                    internal static extern uint getClassesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getTemplatesCountEv")]
                    internal static extern uint getTemplatesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext16getTypedefsCountEv")]
                    internal static extern uint getTypedefsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getVariablesCountEv")]
                    internal static extern uint getVariablesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15getFriendsCountEv")]
                    internal static extern uint getFriendsCount_0(global::System.IntPtr instance);
                }

                public static new DeclarationContext __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new DeclarationContext((DeclarationContext.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static DeclarationContext __CreateInstance(DeclarationContext.Internal native, bool skipVTables = false)
                {
                    return new DeclarationContext(native, skipVTables);
                }

                private static DeclarationContext.Internal* __CopyValue(DeclarationContext.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(204);
                    CppSharp.Parser.AST.DeclarationContext.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DeclarationContext.Internal*) ret;
                }

                private DeclarationContext(DeclarationContext.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DeclarationContext(DeclarationContext.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DeclarationContext(CppSharp.Parser.AST.DeclarationKind kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(204);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = kind;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
                }

                public DeclarationContext(CppSharp.Parser.AST.DeclarationContext _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(204);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Namespace getNamespaces(uint i)
                {
                    var __ret = Internal.getNamespaces_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Namespace __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Namespace.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Namespace) CppSharp.Parser.AST.Namespace.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Namespace.__CreateInstance(__ret);
                    return __result0;
                }

                public void addNamespaces(CppSharp.Parser.AST.Namespace s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addNamespaces_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearNamespaces()
                {
                    Internal.clearNamespaces_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Enumeration getEnums(uint i)
                {
                    var __ret = Internal.getEnums_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Enumeration __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Enumeration.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Enumeration) CppSharp.Parser.AST.Enumeration.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Enumeration.__CreateInstance(__ret);
                    return __result0;
                }

                public void addEnums(CppSharp.Parser.AST.Enumeration s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addEnums_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearEnums()
                {
                    Internal.clearEnums_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Function getFunctions(uint i)
                {
                    var __ret = Internal.getFunctions_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Function __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Function.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Function) CppSharp.Parser.AST.Function.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Function.__CreateInstance(__ret);
                    return __result0;
                }

                public void addFunctions(CppSharp.Parser.AST.Function s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addFunctions_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearFunctions()
                {
                    Internal.clearFunctions_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Class getClasses(uint i)
                {
                    var __ret = Internal.getClasses_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Class __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Class) CppSharp.Parser.AST.Class.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Class.__CreateInstance(__ret);
                    return __result0;
                }

                public void addClasses(CppSharp.Parser.AST.Class s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addClasses_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearClasses()
                {
                    Internal.clearClasses_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Template getTemplates(uint i)
                {
                    var __ret = Internal.getTemplates_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Template __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Template.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Template) CppSharp.Parser.AST.Template.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Template.__CreateInstance(__ret);
                    return __result0;
                }

                public void addTemplates(CppSharp.Parser.AST.Template s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTemplates_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearTemplates()
                {
                    Internal.clearTemplates_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.TypedefDecl getTypedefs(uint i)
                {
                    var __ret = Internal.getTypedefs_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.TypedefDecl __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.TypedefDecl) CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.TypedefDecl.__CreateInstance(__ret);
                    return __result0;
                }

                public void addTypedefs(CppSharp.Parser.AST.TypedefDecl s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTypedefs_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearTypedefs()
                {
                    Internal.clearTypedefs_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Variable getVariables(uint i)
                {
                    var __ret = Internal.getVariables_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Variable __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Variable.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Variable) CppSharp.Parser.AST.Variable.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Variable.__CreateInstance(__ret);
                    return __result0;
                }

                public void addVariables(CppSharp.Parser.AST.Variable s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addVariables_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearVariables()
                {
                    Internal.clearVariables_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Friend getFriends(uint i)
                {
                    var __ret = Internal.getFriends_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Friend __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Friend.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Friend) CppSharp.Parser.AST.Friend.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Friend.__CreateInstance(__ret);
                    return __result0;
                }

                public void addFriends(CppSharp.Parser.AST.Friend s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addFriends_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearFriends()
                {
                    Internal.clearFriends_0((__Instance + __PointerAdjustment));
                }

                public uint NamespacesCount
                {
                    get
                    {
                        var __ret = Internal.getNamespacesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint EnumsCount
                {
                    get
                    {
                        var __ret = Internal.getEnumsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FunctionsCount
                {
                    get
                    {
                        var __ret = Internal.getFunctionsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint ClassesCount
                {
                    get
                    {
                        var __ret = Internal.getClassesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint TemplatesCount
                {
                    get
                    {
                        var __ret = Internal.getTemplatesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint TypedefsCount
                {
                    get
                    {
                        var __ret = Internal.getTypedefsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint VariablesCount
                {
                    get
                    {
                        var __ret = Internal.getVariablesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FriendsCount
                {
                    get
                    {
                        var __ret = Internal.getFriendsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public bool IsAnonymous
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsAnonymous != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsAnonymous = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TypedefDecl : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 100)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new TypedefDecl __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TypedefDecl((TypedefDecl.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TypedefDecl __CreateInstance(TypedefDecl.Internal native, bool skipVTables = false)
                {
                    return new TypedefDecl(native, skipVTables);
                }

                private static TypedefDecl.Internal* __CopyValue(TypedefDecl.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(100);
                    CppSharp.Parser.AST.TypedefDecl.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TypedefDecl.Internal*) ret;
                }

                private TypedefDecl(TypedefDecl.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypedefDecl(TypedefDecl.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypedefDecl()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(100);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypedefDecl(CppSharp.Parser.AST.TypedefDecl _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(100);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class Friend : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 96)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6FriendC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6FriendC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6FriendD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Friend __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Friend((Friend.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Friend __CreateInstance(Friend.Internal native, bool skipVTables = false)
                {
                    return new Friend(native, skipVTables);
                }

                private static Friend.Internal* __CopyValue(Friend.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(96);
                    CppSharp.Parser.AST.Friend.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Friend.Internal*) ret;
                }

                private Friend(Friend.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Friend(Friend.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Friend()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(96);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Friend(CppSharp.Parser.AST.Friend _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(96);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Statement : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9StatementC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9StatementD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9Statement9getStringEv")]
                    internal static extern global::System.IntPtr getString_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9Statement9setStringEPKc")]
                    internal static extern void setString_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Statement __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Statement((Statement.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Statement __CreateInstance(Statement.Internal native, bool skipVTables = false)
                {
                    return new Statement(native, skipVTables);
                }

                private static Statement.Internal* __CopyValue(Statement.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.Statement.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Statement.Internal*) ret;
                }

                private Statement(Statement.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Statement(Statement.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Statement(CppSharp.Parser.AST.Statement _0)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string String
                {
                    get
                    {
                        var __ret = Internal.getString_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setString_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.StatementClass Class
                {
                    get
                    {
                        return ((Internal*) __Instance)->Class;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Class = value;
                    }
                }

                public CppSharp.Parser.AST.Declaration Decl
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->Decl == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Decl))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Decl];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Decl);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Decl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Expression : CppSharp.Parser.AST.Statement, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ExpressionC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ExpressionD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Expression __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Expression((Expression.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Expression __CreateInstance(Expression.Internal native, bool skipVTables = false)
                {
                    return new Expression(native, skipVTables);
                }

                private static Expression.Internal* __CopyValue(Expression.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.Expression.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Expression.Internal*) ret;
                }

                private Expression(Expression.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Expression(Expression.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Statement.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Expression(CppSharp.Parser.AST.Expression _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }
            }

            public unsafe partial class BinaryOperator : CppSharp.Parser.AST.Expression, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 40)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(20)]
                    public global::System.IntPtr LHS;

                    [FieldOffset(24)]
                    public global::System.IntPtr RHS;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperatorC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperatorD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperator12getOpcodeStrEv")]
                    internal static extern global::System.IntPtr getOpcodeStr_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperator12setOpcodeStrEPKc")]
                    internal static extern void setOpcodeStr_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new BinaryOperator __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new BinaryOperator((BinaryOperator.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static BinaryOperator __CreateInstance(BinaryOperator.Internal native, bool skipVTables = false)
                {
                    return new BinaryOperator(native, skipVTables);
                }

                private static BinaryOperator.Internal* __CopyValue(BinaryOperator.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(40);
                    CppSharp.Parser.AST.BinaryOperator.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (BinaryOperator.Internal*) ret;
                }

                private BinaryOperator(BinaryOperator.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BinaryOperator(BinaryOperator.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Expression.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BinaryOperator(CppSharp.Parser.AST.BinaryOperator _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(40);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string OpcodeStr
                {
                    get
                    {
                        var __ret = Internal.getOpcodeStr_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setOpcodeStr_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.Expression LHS
                {
                    get
                    {
                        CppSharp.Parser.AST.Expression __result0;
                        if (((Internal*) __Instance)->LHS == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->LHS))
                            __result0 = (CppSharp.Parser.AST.Expression) CppSharp.Parser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->LHS];
                        else __result0 = CppSharp.Parser.AST.Expression.__CreateInstance(((Internal*) __Instance)->LHS);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->LHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Expression RHS
                {
                    get
                    {
                        CppSharp.Parser.AST.Expression __result0;
                        if (((Internal*) __Instance)->RHS == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->RHS))
                            __result0 = (CppSharp.Parser.AST.Expression) CppSharp.Parser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->RHS];
                        else __result0 = CppSharp.Parser.AST.Expression.__CreateInstance(((Internal*) __Instance)->RHS);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->RHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class CXXConstructExpr : CppSharp.Parser.AST.Expression, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExprC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExprD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr12getArgumentsEj")]
                    internal static extern global::System.IntPtr getArguments_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr12addArgumentsERPNS1_10ExpressionE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new CXXConstructExpr __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new CXXConstructExpr((CXXConstructExpr.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static CXXConstructExpr __CreateInstance(CXXConstructExpr.Internal native, bool skipVTables = false)
                {
                    return new CXXConstructExpr(native, skipVTables);
                }

                private static CXXConstructExpr.Internal* __CopyValue(CXXConstructExpr.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.CXXConstructExpr.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (CXXConstructExpr.Internal*) ret;
                }

                private CXXConstructExpr(CXXConstructExpr.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected CXXConstructExpr(CXXConstructExpr.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Expression.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public CXXConstructExpr(CppSharp.Parser.AST.CXXConstructExpr _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Expression getArguments(uint i)
                {
                    var __ret = Internal.getArguments_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Expression __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Expression) CppSharp.Parser.AST.Expression.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Expression.__CreateInstance(__ret);
                    return __result0;
                }

                public void addArguments(CppSharp.Parser.AST.Expression s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Parameter : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 112)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(100)]
                    public byte IsIndirect;

                    [FieldOffset(101)]
                    public byte HasDefaultValue;

                    [FieldOffset(104)]
                    public uint Index;

                    [FieldOffset(108)]
                    public global::System.IntPtr DefaultArgument;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Parameter __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Parameter((Parameter.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Parameter __CreateInstance(Parameter.Internal native, bool skipVTables = false)
                {
                    return new Parameter(native, skipVTables);
                }

                private static Parameter.Internal* __CopyValue(Parameter.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(112);
                    CppSharp.Parser.AST.Parameter.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Parameter.Internal*) ret;
                }

                private Parameter(Parameter.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Parameter(Parameter.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Parameter()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Parameter(CppSharp.Parser.AST.Parameter _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public bool IsIndirect
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsIndirect != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsIndirect = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasDefaultValue
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasDefaultValue != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasDefaultValue = (byte) (value ? 1 : 0);
                    }
                }

                public uint Index
                {
                    get
                    {
                        return ((Internal*) __Instance)->Index;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Index = value;
                    }
                }

                public CppSharp.Parser.AST.Expression DefaultArgument
                {
                    get
                    {
                        CppSharp.Parser.AST.Expression __result0;
                        if (((Internal*) __Instance)->DefaultArgument == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->DefaultArgument))
                            __result0 = (CppSharp.Parser.AST.Expression) CppSharp.Parser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->DefaultArgument];
                        else __result0 = CppSharp.Parser.AST.Expression.__CreateInstance(((Internal*) __Instance)->DefaultArgument);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->DefaultArgument = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Function : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 156)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(100)]
                    public byte IsReturnIndirect;

                    [FieldOffset(101)]
                    public byte HasThisReturn;

                    [FieldOffset(102)]
                    public byte IsVariadic;

                    [FieldOffset(103)]
                    public byte IsInline;

                    [FieldOffset(104)]
                    public byte IsPure;

                    [FieldOffset(105)]
                    public byte IsDeleted;

                    [FieldOffset(108)]
                    public CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(136)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(152)]
                    public global::System.IntPtr SpecializationInfo;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function13getParametersEj")]
                    internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function13addParametersERPNS1_9ParameterE")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function15clearParametersEv")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function10getMangledEv")]
                    internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function10setMangledEPKc")]
                    internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function12getSignatureEv")]
                    internal static extern global::System.IntPtr getSignature_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function12setSignatureEPKc")]
                    internal static extern void setSignature_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Function18getParametersCountEv")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                public static new Function __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Function((Function.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Function __CreateInstance(Function.Internal native, bool skipVTables = false)
                {
                    return new Function(native, skipVTables);
                }

                private static Function.Internal* __CopyValue(Function.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(156);
                    CppSharp.Parser.AST.Function.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Function.Internal*) ret;
                }

                private Function(Function.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Function(Function.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Function()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Function(CppSharp.Parser.AST.Function _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Parameter getParameters(uint i)
                {
                    var __ret = Internal.getParameters_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Parameter __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Parameter) CppSharp.Parser.AST.Parameter.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                    return __result0;
                }

                public void addParameters(CppSharp.Parser.AST.Parameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0((__Instance + __PointerAdjustment));
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = Internal.getMangled_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setMangled_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string Signature
                {
                    get
                    {
                        var __ret = Internal.getSignature_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setSignature_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ReturnType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public bool IsReturnIndirect
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsReturnIndirect != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsReturnIndirect = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasThisReturn
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasThisReturn != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasThisReturn = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsVariadic
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVariadic != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVariadic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsInline
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsInline != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsInline = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsPure
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsPure != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsPure = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDeleted
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDeleted != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDeleted = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.CXXOperatorKind OperatorKind
                {
                    get
                    {
                        return ((Internal*) __Instance)->OperatorKind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->OperatorKind = value;
                    }
                }

                public CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        return ((Internal*) __Instance)->CallingConvention;
                    }

                    set
                    {
                        ((Internal*) __Instance)->CallingConvention = value;
                    }
                }

                public CppSharp.Parser.AST.FunctionTemplateSpecialization SpecializationInfo
                {
                    get
                    {
                        CppSharp.Parser.AST.FunctionTemplateSpecialization __result0;
                        if (((Internal*) __Instance)->SpecializationInfo == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->SpecializationInfo))
                            __result0 = (CppSharp.Parser.AST.FunctionTemplateSpecialization) CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap[((Internal*) __Instance)->SpecializationInfo];
                        else __result0 = CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(((Internal*) __Instance)->SpecializationInfo);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->SpecializationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Method : CppSharp.Parser.AST.Function, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 184)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(100)]
                    public byte IsReturnIndirect;

                    [FieldOffset(101)]
                    public byte HasThisReturn;

                    [FieldOffset(102)]
                    public byte IsVariadic;

                    [FieldOffset(103)]
                    public byte IsInline;

                    [FieldOffset(104)]
                    public byte IsPure;

                    [FieldOffset(105)]
                    public byte IsDeleted;

                    [FieldOffset(108)]
                    public CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(136)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(152)]
                    public global::System.IntPtr SpecializationInfo;

                    [FieldOffset(156)]
                    public global::System.IntPtr AccessDecl;

                    [FieldOffset(160)]
                    public byte IsVirtual;

                    [FieldOffset(161)]
                    public byte IsStatic;

                    [FieldOffset(162)]
                    public byte IsConst;

                    [FieldOffset(163)]
                    public byte IsImplicit;

                    [FieldOffset(164)]
                    public byte IsExplicit;

                    [FieldOffset(165)]
                    public byte IsOverride;

                    [FieldOffset(168)]
                    public CppSharp.Parser.AST.CXXMethodKind MethodKind;

                    [FieldOffset(172)]
                    public byte IsDefaultConstructor;

                    [FieldOffset(173)]
                    public byte IsCopyConstructor;

                    [FieldOffset(174)]
                    public byte IsMoveConstructor;

                    [FieldOffset(176)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ConversionType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6MethodC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6MethodC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST6MethodD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Method __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Method((Method.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Method __CreateInstance(Method.Internal native, bool skipVTables = false)
                {
                    return new Method(native, skipVTables);
                }

                private static Method.Internal* __CopyValue(Method.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(184);
                    CppSharp.Parser.AST.Method.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Method.Internal*) ret;
                }

                private Method(Method.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Method(Method.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Function.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Method()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(184);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Method(CppSharp.Parser.AST.Method _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(184);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.AccessSpecifierDecl AccessDecl
                {
                    get
                    {
                        CppSharp.Parser.AST.AccessSpecifierDecl __result0;
                        if (((Internal*) __Instance)->AccessDecl == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->AccessDecl))
                            __result0 = (CppSharp.Parser.AST.AccessSpecifierDecl) CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap[((Internal*) __Instance)->AccessDecl];
                        else __result0 = CppSharp.Parser.AST.AccessSpecifierDecl.__CreateInstance(((Internal*) __Instance)->AccessDecl);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->AccessDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsVirtual
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVirtual != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVirtual = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsStatic
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsStatic != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsStatic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsConst
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsConst != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsConst = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsImplicit
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsImplicit != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsImplicit = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExplicit
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsExplicit != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsExplicit = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsOverride
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsOverride != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsOverride = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.CXXMethodKind MethodKind
                {
                    get
                    {
                        return ((Internal*) __Instance)->MethodKind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->MethodKind = value;
                    }
                }

                public bool IsDefaultConstructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDefaultConstructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDefaultConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsCopyConstructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsCopyConstructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsCopyConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsMoveConstructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsMoveConstructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsMoveConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ConversionType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ConversionType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->ConversionType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class Enumeration : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 228)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(204)]
                    public CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers;

                    [FieldOffset(208)]
                    public global::System.IntPtr Type;

                    [FieldOffset(212)]
                    public global::System.IntPtr BuiltinType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration8getItemsEj")]
                    internal static extern void getItems_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration8addItemsERNS2_4ItemE")]
                    internal static extern void addItems_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration10clearItemsEv")]
                    internal static extern void clearItems_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration13getItemsCountEv")]
                    internal static extern uint getItemsCount_0(global::System.IntPtr instance);
                }

                [Flags]
                public enum EnumModifiers
                {
                    Anonymous = 1,
                    Scoped = 2,
                    Flags = 4
                }

                public unsafe partial class Item : CppSharp.Parser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 112)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.Parser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.Parser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(12)]
                        public CppSharp.Parser.SourceLocation.Internal Location;

                        [FieldOffset(16)]
                        public int LineNumberStart;

                        [FieldOffset(20)]
                        public int LineNumberEnd;

                        [FieldOffset(36)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(52)]
                        public byte IsIncomplete;

                        [FieldOffset(53)]
                        public byte IsDependent;

                        [FieldOffset(56)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(60)]
                        public uint DefinitionOrder;

                        [FieldOffset(76)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(104)]
                        public ulong Value;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemC2ERKS3_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4Item13getExpressionEv")]
                        internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4Item13setExpressionEPKc")]
                        internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public static new Item __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                    {
                        return new Item((Item.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                    }

                    public static Item __CreateInstance(Item.Internal native, bool skipVTables = false)
                    {
                        return new Item(native, skipVTables);
                    }

                    private static Item.Internal* __CopyValue(Item.Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(112);
                        CppSharp.Parser.AST.Enumeration.Item.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return (Item.Internal*) ret;
                    }

                    private Item(Item.Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Item(Item.Internal* native, bool skipVTables = false)
                        : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                    {
                        __PointerAdjustment = 0;
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Item()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(112);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Item(CppSharp.Parser.AST.Enumeration.Item _0)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(112);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                        Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                    }

                    public string Expression
                    {
                        get
                        {
                            var __ret = Internal.getExpression_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setExpression_0((__Instance + __PointerAdjustment), arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    public ulong Value
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Value;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Value = value;
                        }
                    }
                }

                public static new Enumeration __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Enumeration((Enumeration.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Enumeration __CreateInstance(Enumeration.Internal native, bool skipVTables = false)
                {
                    return new Enumeration(native, skipVTables);
                }

                private static Enumeration.Internal* __CopyValue(Enumeration.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(228);
                    CppSharp.Parser.AST.Enumeration.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Enumeration.Internal*) ret;
                }

                private Enumeration(Enumeration.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Enumeration(Enumeration.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.DeclarationContext.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Enumeration()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(228);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Enumeration(CppSharp.Parser.AST.Enumeration _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(228);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.Enumeration.Item getItems(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.Enumeration.Item.Internal();
                    Internal.getItems_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.Enumeration.Item.__CreateInstance(__ret);
                }

                public void addItems(CppSharp.Parser.AST.Enumeration.Item s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addItems_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearItems()
                {
                    Internal.clearItems_0((__Instance + __PointerAdjustment));
                }

                public uint ItemsCount
                {
                    get
                    {
                        var __ret = Internal.getItemsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers
                {
                    get
                    {
                        return ((Internal*) __Instance)->Modifiers;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Modifiers = value;
                    }
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        CppSharp.Parser.AST.Type __result0;
                        if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                            __result0 = (CppSharp.Parser.AST.Type) CppSharp.Parser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                        else __result0 = CppSharp.Parser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.BuiltinType BuiltinType
                {
                    get
                    {
                        CppSharp.Parser.AST.BuiltinType __result0;
                        if (((Internal*) __Instance)->BuiltinType == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.BuiltinType.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->BuiltinType))
                            __result0 = (CppSharp.Parser.AST.BuiltinType) CppSharp.Parser.AST.BuiltinType.NativeToManagedMap[((Internal*) __Instance)->BuiltinType];
                        else __result0 = CppSharp.Parser.AST.BuiltinType.__CreateInstance(((Internal*) __Instance)->BuiltinType);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->BuiltinType = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Variable : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 112)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(104)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8VariableC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8VariableC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8VariableD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Variable10getMangledEv")]
                    internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Variable10setMangledEPKc")]
                    internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new Variable __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Variable((Variable.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Variable __CreateInstance(Variable.Internal native, bool skipVTables = false)
                {
                    return new Variable(native, skipVTables);
                }

                private static Variable.Internal* __CopyValue(Variable.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(112);
                    CppSharp.Parser.AST.Variable.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Variable.Internal*) ret;
                }

                private Variable(Variable.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Variable(Variable.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Variable()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Variable(CppSharp.Parser.AST.Variable _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = Internal.getMangled_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setMangled_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class BaseClassSpecifier : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(4)]
                    public byte IsVirtual;

                    [FieldOffset(8)]
                    public global::System.IntPtr Type;

                    [FieldOffset(12)]
                    public int Offset;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18BaseClassSpecifierC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18BaseClassSpecifierC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static BaseClassSpecifier __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new BaseClassSpecifier((BaseClassSpecifier.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static BaseClassSpecifier __CreateInstance(BaseClassSpecifier.Internal native, bool skipVTables = false)
                {
                    return new BaseClassSpecifier(native, skipVTables);
                }

                private static BaseClassSpecifier.Internal* __CopyValue(BaseClassSpecifier.Internal native)
                {
                    var ret = (BaseClassSpecifier.Internal*) Marshal.AllocHGlobal(16);
                    *ret = native;
                    return ret;
                }

                private BaseClassSpecifier(BaseClassSpecifier.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BaseClassSpecifier(BaseClassSpecifier.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BaseClassSpecifier()
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BaseClassSpecifier(CppSharp.Parser.AST.BaseClassSpecifier _0)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((BaseClassSpecifier.Internal*) __Instance) = *((BaseClassSpecifier.Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.BaseClassSpecifier __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        return ((Internal*) __Instance)->Access;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Access = value;
                    }
                }

                public bool IsVirtual
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVirtual != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVirtual = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        CppSharp.Parser.AST.Type __result0;
                        if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                            __result0 = (CppSharp.Parser.AST.Type) CppSharp.Parser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                        else __result0 = CppSharp.Parser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public int Offset
                {
                    get
                    {
                        return ((Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Offset = value;
                    }
                }
            }

            public unsafe partial class Field : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 116)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(100)]
                    public uint Offset;

                    [FieldOffset(104)]
                    public global::System.IntPtr Class;

                    [FieldOffset(108)]
                    public byte IsBitField;

                    [FieldOffset(112)]
                    public uint BitWidth;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5FieldC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5FieldC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5FieldD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Field __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Field((Field.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Field __CreateInstance(Field.Internal native, bool skipVTables = false)
                {
                    return new Field(native, skipVTables);
                }

                private static Field.Internal* __CopyValue(Field.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(116);
                    CppSharp.Parser.AST.Field.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Field.Internal*) ret;
                }

                private Field(Field.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Field(Field.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Field()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(116);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Field(CppSharp.Parser.AST.Field _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(116);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public uint Offset
                {
                    get
                    {
                        return ((Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Offset = value;
                    }
                }

                public CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        CppSharp.Parser.AST.Class __result0;
                        if (((Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Class))
                            __result0 = (CppSharp.Parser.AST.Class) CppSharp.Parser.AST.Class.NativeToManagedMap[((Internal*) __Instance)->Class];
                        else __result0 = CppSharp.Parser.AST.Class.__CreateInstance(((Internal*) __Instance)->Class);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsBitField
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsBitField != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsBitField = (byte) (value ? 1 : 0);
                    }
                }

                public uint BitWidth
                {
                    get
                    {
                        return ((Internal*) __Instance)->BitWidth;
                    }

                    set
                    {
                        ((Internal*) __Instance)->BitWidth = value;
                    }
                }
            }

            public unsafe partial class AccessSpecifierDecl : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 92)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new AccessSpecifierDecl __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new AccessSpecifierDecl((AccessSpecifierDecl.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static AccessSpecifierDecl __CreateInstance(AccessSpecifierDecl.Internal native, bool skipVTables = false)
                {
                    return new AccessSpecifierDecl(native, skipVTables);
                }

                private static AccessSpecifierDecl.Internal* __CopyValue(AccessSpecifierDecl.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(92);
                    CppSharp.Parser.AST.AccessSpecifierDecl.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (AccessSpecifierDecl.Internal*) ret;
                }

                private AccessSpecifierDecl(AccessSpecifierDecl.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected AccessSpecifierDecl(AccessSpecifierDecl.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public AccessSpecifierDecl()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(92);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public AccessSpecifierDecl(CppSharp.Parser.AST.AccessSpecifierDecl _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(92);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }
            }

            public unsafe partial class Class : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 268)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(252)]
                    public byte IsPOD;

                    [FieldOffset(253)]
                    public byte IsAbstract;

                    [FieldOffset(254)]
                    public byte IsUnion;

                    [FieldOffset(255)]
                    public byte IsDynamic;

                    [FieldOffset(256)]
                    public byte IsPolymorphic;

                    [FieldOffset(257)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(258)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(259)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(260)]
                    public byte IsExternCContext;

                    [FieldOffset(264)]
                    public global::System.IntPtr Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5ClassC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5ClassC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5ClassD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class8getBasesEj")]
                    internal static extern global::System.IntPtr getBases_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class8addBasesERPNS1_18BaseClassSpecifierE")]
                    internal static extern void addBases_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class10clearBasesEv")]
                    internal static extern void clearBases_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class9getFieldsEj")]
                    internal static extern global::System.IntPtr getFields_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class9addFieldsERPNS1_5FieldE")]
                    internal static extern void addFields_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class11clearFieldsEv")]
                    internal static extern void clearFields_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class10getMethodsEj")]
                    internal static extern global::System.IntPtr getMethods_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class10addMethodsERPNS1_6MethodE")]
                    internal static extern void addMethods_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class12clearMethodsEv")]
                    internal static extern void clearMethods_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class13getSpecifiersEj")]
                    internal static extern global::System.IntPtr getSpecifiers_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class13addSpecifiersERPNS1_19AccessSpecifierDeclE")]
                    internal static extern void addSpecifiers_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class15clearSpecifiersEv")]
                    internal static extern void clearSpecifiers_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class13getBasesCountEv")]
                    internal static extern uint getBasesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class14getFieldsCountEv")]
                    internal static extern uint getFieldsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class15getMethodsCountEv")]
                    internal static extern uint getMethodsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST5Class18getSpecifiersCountEv")]
                    internal static extern uint getSpecifiersCount_0(global::System.IntPtr instance);
                }

                public static new Class __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Class((Class.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Class __CreateInstance(Class.Internal native, bool skipVTables = false)
                {
                    return new Class(native, skipVTables);
                }

                private static Class.Internal* __CopyValue(Class.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(268);
                    CppSharp.Parser.AST.Class.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Class.Internal*) ret;
                }

                private Class(Class.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Class(Class.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.DeclarationContext.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Class()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(268);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Class(CppSharp.Parser.AST.Class _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(268);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.BaseClassSpecifier getBases(uint i)
                {
                    var __ret = Internal.getBases_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.BaseClassSpecifier __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.BaseClassSpecifier.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.BaseClassSpecifier) CppSharp.Parser.AST.BaseClassSpecifier.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.BaseClassSpecifier.__CreateInstance(__ret);
                    return __result0;
                }

                public void addBases(CppSharp.Parser.AST.BaseClassSpecifier s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addBases_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearBases()
                {
                    Internal.clearBases_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Field getFields(uint i)
                {
                    var __ret = Internal.getFields_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Field __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Field.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Field) CppSharp.Parser.AST.Field.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Field.__CreateInstance(__ret);
                    return __result0;
                }

                public void addFields(CppSharp.Parser.AST.Field s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addFields_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearFields()
                {
                    Internal.clearFields_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.Method getMethods(uint i)
                {
                    var __ret = Internal.getMethods_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.Method __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.Method.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.Method) CppSharp.Parser.AST.Method.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.Method.__CreateInstance(__ret);
                    return __result0;
                }

                public void addMethods(CppSharp.Parser.AST.Method s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addMethods_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearMethods()
                {
                    Internal.clearMethods_0((__Instance + __PointerAdjustment));
                }

                public CppSharp.Parser.AST.AccessSpecifierDecl getSpecifiers(uint i)
                {
                    var __ret = Internal.getSpecifiers_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.AccessSpecifierDecl __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.AccessSpecifierDecl) CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.AccessSpecifierDecl.__CreateInstance(__ret);
                    return __result0;
                }

                public void addSpecifiers(CppSharp.Parser.AST.AccessSpecifierDecl s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecifiers_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearSpecifiers()
                {
                    Internal.clearSpecifiers_0((__Instance + __PointerAdjustment));
                }

                public uint BasesCount
                {
                    get
                    {
                        var __ret = Internal.getBasesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FieldsCount
                {
                    get
                    {
                        var __ret = Internal.getFieldsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint MethodsCount
                {
                    get
                    {
                        var __ret = Internal.getMethodsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint SpecifiersCount
                {
                    get
                    {
                        var __ret = Internal.getSpecifiersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public bool IsPOD
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsPOD != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsPOD = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsAbstract
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsAbstract != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsAbstract = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsUnion
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsUnion != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsUnion = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDynamic
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDynamic != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDynamic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsPolymorphic
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsPolymorphic != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsPolymorphic = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialDefaultConstructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasNonTrivialDefaultConstructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasNonTrivialDefaultConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialCopyConstructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasNonTrivialCopyConstructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasNonTrivialCopyConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialDestructor
                {
                    get
                    {
                        return ((Internal*) __Instance)->HasNonTrivialDestructor != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->HasNonTrivialDestructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExternCContext
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsExternCContext != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsExternCContext = (byte) (value ? 1 : 0);
                    }
                }

                public CppSharp.Parser.AST.ClassLayout Layout
                {
                    get
                    {
                        CppSharp.Parser.AST.ClassLayout __result0;
                        if (((Internal*) __Instance)->Layout == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.ClassLayout.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Layout))
                            __result0 = (CppSharp.Parser.AST.ClassLayout) CppSharp.Parser.AST.ClassLayout.NativeToManagedMap[((Internal*) __Instance)->Layout];
                        else __result0 = CppSharp.Parser.AST.ClassLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Template : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 108)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2ENS1_15DeclarationKindE")]
                    internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2Ev")]
                    internal static extern void ctor_1(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2ERKS2_")]
                    internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Template13getParametersEj")]
                    internal static extern void getParameters_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Template13addParametersERNS1_17TemplateParameterE")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Template15clearParametersEv")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST8Template18getParametersCountEv")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                public static new Template __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Template((Template.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Template __CreateInstance(Template.Internal native, bool skipVTables = false)
                {
                    return new Template(native, skipVTables);
                }

                private static Template.Internal* __CopyValue(Template.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(108);
                    CppSharp.Parser.AST.Template.Internal.cctor_3(ret, new global::System.IntPtr(&native));
                    return (Template.Internal*) ret;
                }

                private Template(Template.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Template(Template.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Template(CppSharp.Parser.AST.DeclarationKind kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(108);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = kind;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
                }

                public Template()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(108);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_1((__Instance + __PointerAdjustment));
                }

                public Template(CppSharp.Parser.AST.Template _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(108);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TemplateParameter getParameters(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateParameter.Internal();
                    Internal.getParameters_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.TemplateParameter.__CreateInstance(__ret);
                }

                public void addParameters(CppSharp.Parser.AST.TemplateParameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0((__Instance + __PointerAdjustment));
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Declaration TemplatedDecl
                {
                    get
                    {
                        CppSharp.Parser.AST.Declaration __result0;
                        if (((Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplatedDecl))
                            __result0 = (CppSharp.Parser.AST.Declaration) CppSharp.Parser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->TemplatedDecl];
                        else __result0 = CppSharp.Parser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->TemplatedDecl);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ClassTemplate : CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 120)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate18getSpecializationsEj")]
                    internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate18addSpecializationsERPNS1_27ClassTemplateSpecializationE")]
                    internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate20clearSpecializationsEv")]
                    internal static extern void clearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate23getSpecializationsCountEv")]
                    internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);
                }

                public static new ClassTemplate __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ClassTemplate((ClassTemplate.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ClassTemplate __CreateInstance(ClassTemplate.Internal native, bool skipVTables = false)
                {
                    return new ClassTemplate(native, skipVTables);
                }

                private static ClassTemplate.Internal* __CopyValue(ClassTemplate.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(120);
                    CppSharp.Parser.AST.ClassTemplate.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassTemplate.Internal*) ret;
                }

                private ClassTemplate(ClassTemplate.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplate(ClassTemplate.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Template.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplate()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplate(CppSharp.Parser.AST.ClassTemplate _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.ClassTemplateSpecialization getSpecializations(uint i)
                {
                    var __ret = Internal.getSpecializations_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.ClassTemplateSpecialization __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.ClassTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.ClassTemplateSpecialization) CppSharp.Parser.AST.ClassTemplateSpecialization.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.ClassTemplateSpecialization.__CreateInstance(__ret);
                    return __result0;
                }

                public void addSpecializations(CppSharp.Parser.AST.ClassTemplateSpecialization s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecializations_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearSpecializations()
                {
                    Internal.clearSpecializations_0((__Instance + __PointerAdjustment));
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = Internal.getSpecializationsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class ClassTemplateSpecialization : CppSharp.Parser.AST.Class, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 288)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(252)]
                    public byte IsPOD;

                    [FieldOffset(253)]
                    public byte IsAbstract;

                    [FieldOffset(254)]
                    public byte IsUnion;

                    [FieldOffset(255)]
                    public byte IsDynamic;

                    [FieldOffset(256)]
                    public byte IsPolymorphic;

                    [FieldOffset(257)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(258)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(259)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(260)]
                    public byte IsExternCContext;

                    [FieldOffset(264)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(268)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(284)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization12getArgumentsEj")]
                    internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization12addArgumentsERNS1_16TemplateArgumentE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new ClassTemplateSpecialization __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ClassTemplateSpecialization((ClassTemplateSpecialization.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ClassTemplateSpecialization __CreateInstance(ClassTemplateSpecialization.Internal native, bool skipVTables = false)
                {
                    return new ClassTemplateSpecialization(native, skipVTables);
                }

                private static ClassTemplateSpecialization.Internal* __CopyValue(ClassTemplateSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(288);
                    CppSharp.Parser.AST.ClassTemplateSpecialization.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassTemplateSpecialization.Internal*) ret;
                }

                private ClassTemplateSpecialization(ClassTemplateSpecialization.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplateSpecialization(ClassTemplateSpecialization.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Class.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplateSpecialization()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(288);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplateSpecialization(CppSharp.Parser.AST.ClassTemplateSpecialization _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(288);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.ClassTemplate TemplatedDecl
                {
                    get
                    {
                        CppSharp.Parser.AST.ClassTemplate __result0;
                        if (((Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.ClassTemplate.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplatedDecl))
                            __result0 = (CppSharp.Parser.AST.ClassTemplate) CppSharp.Parser.AST.ClassTemplate.NativeToManagedMap[((Internal*) __Instance)->TemplatedDecl];
                        else __result0 = CppSharp.Parser.AST.ClassTemplate.__CreateInstance(((Internal*) __Instance)->TemplatedDecl);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        return ((Internal*) __Instance)->SpecializationKind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->SpecializationKind = value;
                    }
                }
            }

            public unsafe partial class ClassTemplatePartialSpecialization : CppSharp.Parser.AST.ClassTemplateSpecialization, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 288)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(252)]
                    public byte IsPOD;

                    [FieldOffset(253)]
                    public byte IsAbstract;

                    [FieldOffset(254)]
                    public byte IsUnion;

                    [FieldOffset(255)]
                    public byte IsDynamic;

                    [FieldOffset(256)]
                    public byte IsPolymorphic;

                    [FieldOffset(257)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(258)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(259)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(260)]
                    public byte IsExternCContext;

                    [FieldOffset(264)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(268)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(284)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new ClassTemplatePartialSpecialization __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ClassTemplatePartialSpecialization((ClassTemplatePartialSpecialization.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ClassTemplatePartialSpecialization __CreateInstance(ClassTemplatePartialSpecialization.Internal native, bool skipVTables = false)
                {
                    return new ClassTemplatePartialSpecialization(native, skipVTables);
                }

                private static ClassTemplatePartialSpecialization.Internal* __CopyValue(ClassTemplatePartialSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(288);
                    CppSharp.Parser.AST.ClassTemplatePartialSpecialization.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (ClassTemplatePartialSpecialization.Internal*) ret;
                }

                private ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.ClassTemplateSpecialization.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplatePartialSpecialization()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(288);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplatePartialSpecialization(CppSharp.Parser.AST.ClassTemplatePartialSpecialization _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(288);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }
            }

            public unsafe partial class FunctionTemplate : CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 120)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate18getSpecializationsEj")]
                    internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate18addSpecializationsERPNS1_30FunctionTemplateSpecializationE")]
                    internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate20clearSpecializationsEv")]
                    internal static extern void clearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate23getSpecializationsCountEv")]
                    internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);
                }

                public static new FunctionTemplate __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new FunctionTemplate((FunctionTemplate.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static FunctionTemplate __CreateInstance(FunctionTemplate.Internal native, bool skipVTables = false)
                {
                    return new FunctionTemplate(native, skipVTables);
                }

                private static FunctionTemplate.Internal* __CopyValue(FunctionTemplate.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(120);
                    CppSharp.Parser.AST.FunctionTemplate.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionTemplate.Internal*) ret;
                }

                private FunctionTemplate(FunctionTemplate.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionTemplate(FunctionTemplate.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Template.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionTemplate()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionTemplate(CppSharp.Parser.AST.FunctionTemplate _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.FunctionTemplateSpecialization getSpecializations(uint i)
                {
                    var __ret = Internal.getSpecializations_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.FunctionTemplateSpecialization __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.FunctionTemplateSpecialization) CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(__ret);
                    return __result0;
                }

                public void addSpecializations(CppSharp.Parser.AST.FunctionTemplateSpecialization s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecializations_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearSpecializations()
                {
                    Internal.clearSpecializations_0((__Instance + __PointerAdjustment));
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = Internal.getSpecializationsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class FunctionTemplateSpecialization : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Template;

                    [FieldOffset(16)]
                    public global::System.IntPtr SpecializedFunction;

                    [FieldOffset(20)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization12getArgumentsEj")]
                    internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization12addArgumentsERNS1_16TemplateArgumentE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static FunctionTemplateSpecialization __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new FunctionTemplateSpecialization((FunctionTemplateSpecialization.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static FunctionTemplateSpecialization __CreateInstance(FunctionTemplateSpecialization.Internal native, bool skipVTables = false)
                {
                    return new FunctionTemplateSpecialization(native, skipVTables);
                }

                private static FunctionTemplateSpecialization.Internal* __CopyValue(FunctionTemplateSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    CppSharp.Parser.AST.FunctionTemplateSpecialization.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionTemplateSpecialization.Internal*) ret;
                }

                private FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionTemplateSpecialization()
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionTemplateSpecialization(CppSharp.Parser.AST.FunctionTemplateSpecialization _0)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.FunctionTemplateSpecialization __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.FunctionTemplate Template
                {
                    get
                    {
                        CppSharp.Parser.AST.FunctionTemplate __result0;
                        if (((Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.FunctionTemplate.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Template))
                            __result0 = (CppSharp.Parser.AST.FunctionTemplate) CppSharp.Parser.AST.FunctionTemplate.NativeToManagedMap[((Internal*) __Instance)->Template];
                        else __result0 = CppSharp.Parser.AST.FunctionTemplate.__CreateInstance(((Internal*) __Instance)->Template);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Function SpecializedFunction
                {
                    get
                    {
                        CppSharp.Parser.AST.Function __result0;
                        if (((Internal*) __Instance)->SpecializedFunction == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.Function.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->SpecializedFunction))
                            __result0 = (CppSharp.Parser.AST.Function) CppSharp.Parser.AST.Function.NativeToManagedMap[((Internal*) __Instance)->SpecializedFunction];
                        else __result0 = CppSharp.Parser.AST.Function.__CreateInstance(((Internal*) __Instance)->SpecializedFunction);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->SpecializedFunction = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        return ((Internal*) __Instance)->SpecializationKind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->SpecializationKind = value;
                    }
                }
            }

            public unsafe partial class Namespace : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 204)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(201)]
                    public byte IsInline;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new Namespace __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Namespace((Namespace.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Namespace __CreateInstance(Namespace.Internal native, bool skipVTables = false)
                {
                    return new Namespace(native, skipVTables);
                }

                private static Namespace.Internal* __CopyValue(Namespace.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(204);
                    CppSharp.Parser.AST.Namespace.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Namespace.Internal*) ret;
                }

                private Namespace(Namespace.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Namespace(Namespace.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.DeclarationContext.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Namespace()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(204);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Namespace(CppSharp.Parser.AST.Namespace _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(204);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public bool IsInline
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsInline != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsInline = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class PreprocessedEntity : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 96)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public static new PreprocessedEntity __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new PreprocessedEntity((PreprocessedEntity.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static PreprocessedEntity __CreateInstance(PreprocessedEntity.Internal native, bool skipVTables = false)
                {
                    return new PreprocessedEntity(native, skipVTables);
                }

                private static PreprocessedEntity.Internal* __CopyValue(PreprocessedEntity.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(96);
                    CppSharp.Parser.AST.PreprocessedEntity.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PreprocessedEntity.Internal*) ret;
                }

                private PreprocessedEntity(PreprocessedEntity.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PreprocessedEntity(PreprocessedEntity.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Declaration.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PreprocessedEntity()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(96);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PreprocessedEntity(CppSharp.Parser.AST.PreprocessedEntity _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(96);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.MacroLocation MacroLocation
                {
                    get
                    {
                        return ((Internal*) __Instance)->MacroLocation;
                    }

                    set
                    {
                        ((Internal*) __Instance)->MacroLocation = value;
                    }
                }
            }

            public unsafe partial class MacroDefinition : CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 108)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinition13getExpressionEv")]
                    internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinition13setExpressionEPKc")]
                    internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new MacroDefinition __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new MacroDefinition((MacroDefinition.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static MacroDefinition __CreateInstance(MacroDefinition.Internal native, bool skipVTables = false)
                {
                    return new MacroDefinition(native, skipVTables);
                }

                private static MacroDefinition.Internal* __CopyValue(MacroDefinition.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(108);
                    CppSharp.Parser.AST.MacroDefinition.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MacroDefinition.Internal*) ret;
                }

                private MacroDefinition(MacroDefinition.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MacroDefinition(MacroDefinition.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.PreprocessedEntity.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MacroDefinition()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(108);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MacroDefinition(CppSharp.Parser.AST.MacroDefinition _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(108);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Expression
                {
                    get
                    {
                        var __ret = Internal.getExpression_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setExpression_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class MacroExpansion : CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 112)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(92)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [FieldOffset(108)]
                    public global::System.IntPtr Definition;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansion7getTextEv")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansion7setTextEPKc")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new MacroExpansion __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new MacroExpansion((MacroExpansion.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static MacroExpansion __CreateInstance(MacroExpansion.Internal native, bool skipVTables = false)
                {
                    return new MacroExpansion(native, skipVTables);
                }

                private static MacroExpansion.Internal* __CopyValue(MacroExpansion.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(112);
                    CppSharp.Parser.AST.MacroExpansion.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MacroExpansion.Internal*) ret;
                }

                private MacroExpansion(MacroExpansion.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MacroExpansion(MacroExpansion.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.PreprocessedEntity.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MacroExpansion()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MacroExpansion(CppSharp.Parser.AST.MacroExpansion _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(112);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.MacroDefinition Definition
                {
                    get
                    {
                        CppSharp.Parser.AST.MacroDefinition __result0;
                        if (((Internal*) __Instance)->Definition == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Definition))
                            __result0 = (CppSharp.Parser.AST.MacroDefinition) CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap[((Internal*) __Instance)->Definition];
                        else __result0 = CppSharp.Parser.AST.MacroDefinition.__CreateInstance(((Internal*) __Instance)->Definition);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Definition = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class TranslationUnit : CppSharp.Parser.AST.Namespace, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 232)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(36)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(52)]
                    public byte IsIncomplete;

                    [FieldOffset(53)]
                    public byte IsDependent;

                    [FieldOffset(56)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(60)]
                    public uint DefinitionOrder;

                    [FieldOffset(76)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(200)]
                    public byte IsAnonymous;

                    [FieldOffset(201)]
                    public byte IsInline;

                    [FieldOffset(216)]
                    public byte IsSystemHeader;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit9getMacrosEj")]
                    internal static extern global::System.IntPtr getMacros_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit9addMacrosERPNS1_15MacroDefinitionE")]
                    internal static extern void addMacros_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11clearMacrosEv")]
                    internal static extern void clearMacros_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11getFileNameEv")]
                    internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11setFileNameEPKc")]
                    internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit14getMacrosCountEv")]
                    internal static extern uint getMacrosCount_0(global::System.IntPtr instance);
                }

                public static new TranslationUnit __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TranslationUnit((TranslationUnit.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TranslationUnit __CreateInstance(TranslationUnit.Internal native, bool skipVTables = false)
                {
                    return new TranslationUnit(native, skipVTables);
                }

                private static TranslationUnit.Internal* __CopyValue(TranslationUnit.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(232);
                    CppSharp.Parser.AST.TranslationUnit.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TranslationUnit.Internal*) ret;
                }

                private TranslationUnit(TranslationUnit.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TranslationUnit(TranslationUnit.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Namespace.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TranslationUnit()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(232);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TranslationUnit(CppSharp.Parser.AST.TranslationUnit _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(232);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.MacroDefinition getMacros(uint i)
                {
                    var __ret = Internal.getMacros_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.MacroDefinition __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.MacroDefinition) CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.MacroDefinition.__CreateInstance(__ret);
                    return __result0;
                }

                public void addMacros(CppSharp.Parser.AST.MacroDefinition s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addMacros_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearMacros()
                {
                    Internal.clearMacros_0((__Instance + __PointerAdjustment));
                }

                public string FileName
                {
                    get
                    {
                        var __ret = Internal.getFileName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setFileName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint MacrosCount
                {
                    get
                    {
                        var __ret = Internal.getMacrosCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public bool IsSystemHeader
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsSystemHeader != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsSystemHeader = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class NativeLibrary : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 40)]
                public partial struct Internal
                {
                    [FieldOffset(12)]
                    public CppSharp.Parser.AST.ArchType ArchType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary10getSymbolsEj")]
                    internal static extern global::System.IntPtr getSymbols_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary10addSymbolsEPKc")]
                    internal static extern void addSymbols_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary12clearSymbolsEv")]
                    internal static extern void clearSymbols_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15getDependenciesEj")]
                    internal static extern global::System.IntPtr getDependencies_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15addDependenciesEPKc")]
                    internal static extern void addDependencies_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary17clearDependenciesEv")]
                    internal static extern void clearDependencies_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary11getFileNameEv")]
                    internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary11setFileNameEPKc")]
                    internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15getSymbolsCountEv")]
                    internal static extern uint getSymbolsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary20getDependenciesCountEv")]
                    internal static extern uint getDependenciesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static NativeLibrary __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new NativeLibrary((NativeLibrary.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static NativeLibrary __CreateInstance(NativeLibrary.Internal native, bool skipVTables = false)
                {
                    return new NativeLibrary(native, skipVTables);
                }

                private static NativeLibrary.Internal* __CopyValue(NativeLibrary.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(40);
                    CppSharp.Parser.AST.NativeLibrary.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (NativeLibrary.Internal*) ret;
                }

                private NativeLibrary(NativeLibrary.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected NativeLibrary(NativeLibrary.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public NativeLibrary()
                {
                    __Instance = Marshal.AllocHGlobal(40);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public NativeLibrary(CppSharp.Parser.AST.NativeLibrary _0)
                {
                    __Instance = Marshal.AllocHGlobal(40);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.NativeLibrary __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string getSymbols(uint i)
                {
                    var __ret = Internal.getSymbols_0((__Instance + __PointerAdjustment), i);
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void addSymbols(string s)
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(s);
                    Internal.addSymbols_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }

                public void clearSymbols()
                {
                    Internal.clearSymbols_0((__Instance + __PointerAdjustment));
                }

                public string getDependencies(uint i)
                {
                    var __ret = Internal.getDependencies_0((__Instance + __PointerAdjustment), i);
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void addDependencies(string s)
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(s);
                    Internal.addDependencies_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }

                public void clearDependencies()
                {
                    Internal.clearDependencies_0((__Instance + __PointerAdjustment));
                }

                public string FileName
                {
                    get
                    {
                        var __ret = Internal.getFileName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setFileName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint SymbolsCount
                {
                    get
                    {
                        var __ret = Internal.getSymbolsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint DependenciesCount
                {
                    get
                    {
                        var __ret = Internal.getDependenciesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.ArchType ArchType
                {
                    get
                    {
                        return ((Internal*) __Instance)->ArchType;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ArchType = value;
                    }
                }
            }

            public unsafe partial class ASTContext : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext19getTranslationUnitsEj")]
                    internal static extern global::System.IntPtr getTranslationUnits_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext19addTranslationUnitsERPNS1_15TranslationUnitE")]
                    internal static extern void addTranslationUnits_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext21clearTranslationUnitsEv")]
                    internal static extern void clearTranslationUnits_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext24getTranslationUnitsCountEv")]
                    internal static extern uint getTranslationUnitsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static ASTContext __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ASTContext((ASTContext.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ASTContext __CreateInstance(ASTContext.Internal native, bool skipVTables = false)
                {
                    return new ASTContext(native, skipVTables);
                }

                private static ASTContext.Internal* __CopyValue(ASTContext.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.ASTContext.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ASTContext.Internal*) ret;
                }

                private ASTContext(ASTContext.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ASTContext(ASTContext.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ASTContext()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ASTContext(CppSharp.Parser.AST.ASTContext _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.ASTContext __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.TranslationUnit getTranslationUnits(uint i)
                {
                    var __ret = Internal.getTranslationUnits_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.TranslationUnit __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.TranslationUnit.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.TranslationUnit) CppSharp.Parser.AST.TranslationUnit.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.TranslationUnit.__CreateInstance(__ret);
                    return __result0;
                }

                public void addTranslationUnits(CppSharp.Parser.AST.TranslationUnit s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTranslationUnits_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearTranslationUnits()
                {
                    Internal.clearTranslationUnits_0((__Instance + __PointerAdjustment));
                }

                public uint TranslationUnitsCount
                {
                    get
                    {
                        var __ret = Internal.getTranslationUnitsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Comment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST7CommentC2ENS1_11CommentKindE")]
                    internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST7CommentC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Comment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new Comment((Comment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static Comment __CreateInstance(Comment.Internal native, bool skipVTables = false)
                {
                    return new Comment(native, skipVTables);
                }

                private static Comment.Internal* __CopyValue(Comment.Internal native)
                {
                    var ret = (Comment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private Comment(Comment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Comment(Comment.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Comment(CppSharp.Parser.AST.CommentKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = kind;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
                }

                public Comment(CppSharp.Parser.AST.Comment _0)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((Comment.Internal*) __Instance) = *((Comment.Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public CppSharp.Parser.AST.CommentKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }
            }

            public unsafe partial class BlockContentComment : CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2ENS1_11CommentKindE")]
                    internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new BlockContentComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new BlockContentComment((BlockContentComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static BlockContentComment __CreateInstance(BlockContentComment.Internal native, bool skipVTables = false)
                {
                    return new BlockContentComment(native, skipVTables);
                }

                private static BlockContentComment.Internal* __CopyValue(BlockContentComment.Internal native)
                {
                    var ret = (BlockContentComment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private BlockContentComment(BlockContentComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BlockContentComment(BlockContentComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Comment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BlockContentComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BlockContentComment(CppSharp.Parser.AST.CommentKind Kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = Kind;
                    Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public BlockContentComment(CppSharp.Parser.AST.BlockContentComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((BlockContentComment.Internal*) __Instance) = *((BlockContentComment.Internal*) _0.__Instance);
                }
            }

            public unsafe partial class FullComment : CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment9getBlocksEj")]
                    internal static extern global::System.IntPtr getBlocks_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment9addBlocksERPNS1_19BlockContentCommentE")]
                    internal static extern void addBlocks_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment11clearBlocksEv")]
                    internal static extern void clearBlocks_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment14getBlocksCountEv")]
                    internal static extern uint getBlocksCount_0(global::System.IntPtr instance);
                }

                public static new FullComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new FullComment((FullComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static FullComment __CreateInstance(FullComment.Internal native, bool skipVTables = false)
                {
                    return new FullComment(native, skipVTables);
                }

                private static FullComment.Internal* __CopyValue(FullComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.FullComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FullComment.Internal*) ret;
                }

                private FullComment(FullComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FullComment(FullComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Comment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FullComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FullComment(CppSharp.Parser.AST.FullComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.BlockContentComment getBlocks(uint i)
                {
                    var __ret = Internal.getBlocks_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.BlockContentComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.BlockContentComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.BlockContentComment) CppSharp.Parser.AST.BlockContentComment.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.BlockContentComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void addBlocks(CppSharp.Parser.AST.BlockContentComment s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addBlocks_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearBlocks()
                {
                    Internal.clearBlocks_0((__Instance + __PointerAdjustment));
                }

                public uint BlocksCount
                {
                    get
                    {
                        var __ret = Internal.getBlocksCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class BlockCommandComment : CppSharp.Parser.AST.BlockContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2ENS1_11CommentKindE")]
                    internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2ERKS2_")]
                    internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment12getArgumentsEj")]
                    internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment12addArgumentsERNS2_8ArgumentE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public unsafe partial class Argument : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public partial struct Internal
                    {
                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentC2ERKS3_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8Argument7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8Argument7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Argument __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                    {
                        return new Argument((Argument.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                    }

                    public static Argument __CreateInstance(Argument.Internal native, bool skipVTables = false)
                    {
                        return new Argument(native, skipVTables);
                    }

                    private static Argument.Internal* __CopyValue(Argument.Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(12);
                        CppSharp.Parser.AST.BlockCommandComment.Argument.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                        return (Argument.Internal*) ret;
                    }

                    private Argument(Argument.Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Argument(Argument.Internal* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Argument()
                    {
                        __Instance = Marshal.AllocHGlobal(12);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Argument(CppSharp.Parser.AST.BlockCommandComment.Argument _0)
                    {
                        __Instance = Marshal.AllocHGlobal(12);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                        Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        if (!__ownsNativeInstance && disposing)
                            throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                        CppSharp.Parser.AST.BlockCommandComment.Argument __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        Internal.dtor_0((__Instance + __PointerAdjustment));
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Text
                    {
                        get
                        {
                            var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }
                }

                public static new BlockCommandComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new BlockCommandComment((BlockCommandComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static BlockCommandComment __CreateInstance(BlockCommandComment.Internal native, bool skipVTables = false)
                {
                    return new BlockCommandComment(native, skipVTables);
                }

                private static BlockCommandComment.Internal* __CopyValue(BlockCommandComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.BlockCommandComment.Internal.cctor_3(ret, new global::System.IntPtr(&native));
                    return (BlockCommandComment.Internal*) ret;
                }

                private BlockCommandComment(BlockCommandComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BlockCommandComment(BlockCommandComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockContentComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BlockCommandComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BlockCommandComment(CppSharp.Parser.AST.CommentKind Kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = Kind;
                    Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public BlockCommandComment(CppSharp.Parser.AST.BlockCommandComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.BlockCommandComment.Argument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.BlockCommandComment.Argument.Internal();
                    Internal.getArguments_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.BlockCommandComment.Argument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.BlockCommandComment.Argument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint CommandId
                {
                    get
                    {
                        return ((Internal*) __Instance)->CommandId;
                    }

                    set
                    {
                        ((Internal*) __Instance)->CommandId = value;
                    }
                }
            }

            public unsafe partial class ParamCommandComment : CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(20)]
                    public CppSharp.Parser.AST.ParamCommandComment.PassDirection Direction;

                    [FieldOffset(24)]
                    public uint ParamIndex;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentC2ERKS2_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public enum PassDirection : uint
                {
                    In = 0,
                    Out = 1,
                    InOut = 2
                }

                public static new ParamCommandComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ParamCommandComment((ParamCommandComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ParamCommandComment __CreateInstance(ParamCommandComment.Internal native, bool skipVTables = false)
                {
                    return new ParamCommandComment(native, skipVTables);
                }

                private static ParamCommandComment.Internal* __CopyValue(ParamCommandComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.ParamCommandComment.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (ParamCommandComment.Internal*) ret;
                }

                private ParamCommandComment(ParamCommandComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ParamCommandComment(ParamCommandComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockCommandComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ParamCommandComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ParamCommandComment(CppSharp.Parser.AST.ParamCommandComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.ParamCommandComment.PassDirection Direction
                {
                    get
                    {
                        return ((Internal*) __Instance)->Direction;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Direction = value;
                    }
                }

                public uint ParamIndex
                {
                    get
                    {
                        return ((Internal*) __Instance)->ParamIndex;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ParamIndex = value;
                    }
                }
            }

            public unsafe partial class TParamCommandComment : CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment11getPositionEj")]
                    internal static extern uint getPosition_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment11addPositionERj")]
                    internal static extern void addPosition_0(global::System.IntPtr instance, uint* s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment13clearPositionEv")]
                    internal static extern void clearPosition_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment16getPositionCountEv")]
                    internal static extern uint getPositionCount_0(global::System.IntPtr instance);
                }

                public static new TParamCommandComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TParamCommandComment((TParamCommandComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TParamCommandComment __CreateInstance(TParamCommandComment.Internal native, bool skipVTables = false)
                {
                    return new TParamCommandComment(native, skipVTables);
                }

                private static TParamCommandComment.Internal* __CopyValue(TParamCommandComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.TParamCommandComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TParamCommandComment.Internal*) ret;
                }

                private TParamCommandComment(TParamCommandComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TParamCommandComment(TParamCommandComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockCommandComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TParamCommandComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TParamCommandComment(CppSharp.Parser.AST.TParamCommandComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public uint getPosition(uint i)
                {
                    var __ret = Internal.getPosition_0((__Instance + __PointerAdjustment), i);
                    return __ret;
                }

                public void addPosition(ref uint s)
                {
                    fixed (uint* __refParamPtr0 = &s)
                    {
                        var arg0 = __refParamPtr0;
                        Internal.addPosition_0((__Instance + __PointerAdjustment), arg0);
                    }
                }

                public void clearPosition()
                {
                    Internal.clearPosition_0((__Instance + __PointerAdjustment));
                }

                public uint PositionCount
                {
                    get
                    {
                        var __ret = Internal.getPositionCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VerbatimBlockLineComment : CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineComment7getTextEv")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineComment7setTextEPKc")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new VerbatimBlockLineComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VerbatimBlockLineComment((VerbatimBlockLineComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VerbatimBlockLineComment __CreateInstance(VerbatimBlockLineComment.Internal native, bool skipVTables = false)
                {
                    return new VerbatimBlockLineComment(native, skipVTables);
                }

                private static VerbatimBlockLineComment.Internal* __CopyValue(VerbatimBlockLineComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.VerbatimBlockLineComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (VerbatimBlockLineComment.Internal*) ret;
                }

                private VerbatimBlockLineComment(VerbatimBlockLineComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimBlockLineComment(VerbatimBlockLineComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Comment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimBlockLineComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimBlockLineComment(CppSharp.Parser.AST.VerbatimBlockLineComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class VerbatimBlockComment : CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment8getLinesEj")]
                    internal static extern global::System.IntPtr getLines_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment8addLinesERPNS1_24VerbatimBlockLineCommentE")]
                    internal static extern void addLines_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment10clearLinesEv")]
                    internal static extern void clearLines_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment13getLinesCountEv")]
                    internal static extern uint getLinesCount_0(global::System.IntPtr instance);
                }

                public static new VerbatimBlockComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VerbatimBlockComment((VerbatimBlockComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VerbatimBlockComment __CreateInstance(VerbatimBlockComment.Internal native, bool skipVTables = false)
                {
                    return new VerbatimBlockComment(native, skipVTables);
                }

                private static VerbatimBlockComment.Internal* __CopyValue(VerbatimBlockComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.VerbatimBlockComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (VerbatimBlockComment.Internal*) ret;
                }

                private VerbatimBlockComment(VerbatimBlockComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimBlockComment(VerbatimBlockComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockCommandComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimBlockComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimBlockComment(CppSharp.Parser.AST.VerbatimBlockComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.VerbatimBlockLineComment getLines(uint i)
                {
                    var __ret = Internal.getLines_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.VerbatimBlockLineComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.VerbatimBlockLineComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.VerbatimBlockLineComment) CppSharp.Parser.AST.VerbatimBlockLineComment.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.VerbatimBlockLineComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void addLines(CppSharp.Parser.AST.VerbatimBlockLineComment s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addLines_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearLines()
                {
                    Internal.clearLines_0((__Instance + __PointerAdjustment));
                }

                public uint LinesCount
                {
                    get
                    {
                        var __ret = Internal.getLinesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VerbatimLineComment : CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineComment7getTextEv")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineComment7setTextEPKc")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new VerbatimLineComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new VerbatimLineComment((VerbatimLineComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static VerbatimLineComment __CreateInstance(VerbatimLineComment.Internal native, bool skipVTables = false)
                {
                    return new VerbatimLineComment(native, skipVTables);
                }

                private static VerbatimLineComment.Internal* __CopyValue(VerbatimLineComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.VerbatimLineComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (VerbatimLineComment.Internal*) ret;
                }

                private VerbatimLineComment(VerbatimLineComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimLineComment(VerbatimLineComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockCommandComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimLineComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimLineComment(CppSharp.Parser.AST.VerbatimLineComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class InlineContentComment : CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2ENS1_11CommentKindE")]
                    internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new InlineContentComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new InlineContentComment((InlineContentComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static InlineContentComment __CreateInstance(InlineContentComment.Internal native, bool skipVTables = false)
                {
                    return new InlineContentComment(native, skipVTables);
                }

                private static InlineContentComment.Internal* __CopyValue(InlineContentComment.Internal native)
                {
                    var ret = (InlineContentComment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private InlineContentComment(InlineContentComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InlineContentComment(InlineContentComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.Comment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InlineContentComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InlineContentComment(CppSharp.Parser.AST.CommentKind Kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = Kind;
                    Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public InlineContentComment(CppSharp.Parser.AST.InlineContentComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((InlineContentComment.Internal*) __Instance) = *((InlineContentComment.Internal*) _0.__Instance);
                }
            }

            public unsafe partial class ParagraphComment : CppSharp.Parser.AST.BlockContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte IsWhitespace;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment10getContentEj")]
                    internal static extern global::System.IntPtr getContent_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment10addContentERPNS1_20InlineContentCommentE")]
                    internal static extern void addContent_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment12clearContentEv")]
                    internal static extern void clearContent_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment15getContentCountEv")]
                    internal static extern uint getContentCount_0(global::System.IntPtr instance);
                }

                public static new ParagraphComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new ParagraphComment((ParagraphComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static ParagraphComment __CreateInstance(ParagraphComment.Internal native, bool skipVTables = false)
                {
                    return new ParagraphComment(native, skipVTables);
                }

                private static ParagraphComment.Internal* __CopyValue(ParagraphComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.ParagraphComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ParagraphComment.Internal*) ret;
                }

                private ParagraphComment(ParagraphComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ParagraphComment(ParagraphComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.BlockContentComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ParagraphComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ParagraphComment(CppSharp.Parser.AST.ParagraphComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.InlineContentComment getContent(uint i)
                {
                    var __ret = Internal.getContent_0((__Instance + __PointerAdjustment), i);
                    CppSharp.Parser.AST.InlineContentComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.InlineContentComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (CppSharp.Parser.AST.InlineContentComment) CppSharp.Parser.AST.InlineContentComment.NativeToManagedMap[__ret];
                    else __result0 = CppSharp.Parser.AST.InlineContentComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void addContent(CppSharp.Parser.AST.InlineContentComment s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addContent_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearContent()
                {
                    Internal.clearContent_0((__Instance + __PointerAdjustment));
                }

                public uint ContentCount
                {
                    get
                    {
                        var __ret = Internal.getContentCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public bool IsWhitespace
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsWhitespace != 0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsWhitespace = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class InlineCommandComment : CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.InlineCommandComment.RenderKind CommentRenderKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment12getArgumentsEj")]
                    internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment12addArgumentsERNS2_8ArgumentE")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment14clearArgumentsEv")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment17getArgumentsCountEv")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public enum RenderKind : uint
                {
                    RenderNormal = 0,
                    RenderBold = 1,
                    RenderMonospaced = 2,
                    RenderEmphasized = 3
                }

                public unsafe partial class Argument : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public partial struct Internal
                    {
                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentC2ERKS3_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8Argument7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8Argument7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Argument __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                    {
                        return new Argument((Argument.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                    }

                    public static Argument __CreateInstance(Argument.Internal native, bool skipVTables = false)
                    {
                        return new Argument(native, skipVTables);
                    }

                    private static Argument.Internal* __CopyValue(Argument.Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(12);
                        CppSharp.Parser.AST.InlineCommandComment.Argument.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                        return (Argument.Internal*) ret;
                    }

                    private Argument(Argument.Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Argument(Argument.Internal* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Argument()
                    {
                        __Instance = Marshal.AllocHGlobal(12);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Argument(CppSharp.Parser.AST.InlineCommandComment.Argument _0)
                    {
                        __Instance = Marshal.AllocHGlobal(12);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                        Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        if (!__ownsNativeInstance && disposing)
                            throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                        CppSharp.Parser.AST.InlineCommandComment.Argument __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        Internal.dtor_0((__Instance + __PointerAdjustment));
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Text
                    {
                        get
                        {
                            var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }
                }

                public static new InlineCommandComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new InlineCommandComment((InlineCommandComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static InlineCommandComment __CreateInstance(InlineCommandComment.Internal native, bool skipVTables = false)
                {
                    return new InlineCommandComment(native, skipVTables);
                }

                private static InlineCommandComment.Internal* __CopyValue(InlineCommandComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.InlineCommandComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (InlineCommandComment.Internal*) ret;
                }

                private InlineCommandComment(InlineCommandComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InlineCommandComment(InlineCommandComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.InlineContentComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InlineCommandComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InlineCommandComment(CppSharp.Parser.AST.InlineCommandComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.InlineCommandComment.Argument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.InlineCommandComment.Argument.Internal();
                    Internal.getArguments_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.InlineCommandComment.Argument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.InlineCommandComment.Argument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.InlineCommandComment.RenderKind CommentRenderKind
                {
                    get
                    {
                        return ((Internal*) __Instance)->CommentRenderKind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->CommentRenderKind = value;
                    }
                }
            }

            public unsafe partial class HTMLTagComment : CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2ENS1_11CommentKindE")]
                    internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new HTMLTagComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new HTMLTagComment((HTMLTagComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static HTMLTagComment __CreateInstance(HTMLTagComment.Internal native, bool skipVTables = false)
                {
                    return new HTMLTagComment(native, skipVTables);
                }

                private static HTMLTagComment.Internal* __CopyValue(HTMLTagComment.Internal native)
                {
                    var ret = (HTMLTagComment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private HTMLTagComment(HTMLTagComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLTagComment(HTMLTagComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.InlineContentComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLTagComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLTagComment(CppSharp.Parser.AST.CommentKind Kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = Kind;
                    Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
                }

                public HTMLTagComment(CppSharp.Parser.AST.HTMLTagComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((HTMLTagComment.Internal*) __Instance) = *((HTMLTagComment.Internal*) _0.__Instance);
                }
            }

            public unsafe partial class HTMLStartTagComment : CppSharp.Parser.AST.HTMLTagComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment13getAttributesEj")]
                    internal static extern void getAttributes_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment13addAttributesERNS2_9AttributeE")]
                    internal static extern void addAttributes_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment15clearAttributesEv")]
                    internal static extern void clearAttributes_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment10getTagNameEv")]
                    internal static extern global::System.IntPtr getTagName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment10setTagNameEPKc")]
                    internal static extern void setTagName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment18getAttributesCountEv")]
                    internal static extern uint getAttributesCount_0(global::System.IntPtr instance);
                }

                public unsafe partial class Attribute : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct Internal
                    {
                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeC2ERKS3_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute7getNameEv")]
                        internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute7setNameEPKc")]
                        internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute8getValueEv")]
                        internal static extern global::System.IntPtr getValue_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute8setValueEPKc")]
                        internal static extern void setValue_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Attribute __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                    {
                        return new Attribute((Attribute.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                    }

                    public static Attribute __CreateInstance(Attribute.Internal native, bool skipVTables = false)
                    {
                        return new Attribute(native, skipVTables);
                    }

                    private static Attribute.Internal* __CopyValue(Attribute.Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(24);
                        CppSharp.Parser.AST.HTMLStartTagComment.Attribute.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                        return (Attribute.Internal*) ret;
                    }

                    private Attribute(Attribute.Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Attribute(Attribute.Internal* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Attribute()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Attribute(CppSharp.Parser.AST.HTMLStartTagComment.Attribute _0)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                        Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        if (!__ownsNativeInstance && disposing)
                            throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                        CppSharp.Parser.AST.HTMLStartTagComment.Attribute __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        Internal.dtor_0((__Instance + __PointerAdjustment));
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Name
                    {
                        get
                        {
                            var __ret = Internal.getName_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setName_0((__Instance + __PointerAdjustment), arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    public string Value
                    {
                        get
                        {
                            var __ret = Internal.getValue_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setValue_0((__Instance + __PointerAdjustment), arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }
                }

                public static new HTMLStartTagComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new HTMLStartTagComment((HTMLStartTagComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static HTMLStartTagComment __CreateInstance(HTMLStartTagComment.Internal native, bool skipVTables = false)
                {
                    return new HTMLStartTagComment(native, skipVTables);
                }

                private static HTMLStartTagComment.Internal* __CopyValue(HTMLStartTagComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.HTMLStartTagComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (HTMLStartTagComment.Internal*) ret;
                }

                private HTMLStartTagComment(HTMLStartTagComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLStartTagComment(HTMLStartTagComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.HTMLTagComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLStartTagComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLStartTagComment(CppSharp.Parser.AST.HTMLStartTagComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public CppSharp.Parser.AST.HTMLStartTagComment.Attribute getAttributes(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.HTMLStartTagComment.Attribute.Internal();
                    Internal.getAttributes_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                    return CppSharp.Parser.AST.HTMLStartTagComment.Attribute.__CreateInstance(__ret);
                }

                public void addAttributes(CppSharp.Parser.AST.HTMLStartTagComment.Attribute s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addAttributes_0((__Instance + __PointerAdjustment), arg0);
                }

                public void clearAttributes()
                {
                    Internal.clearAttributes_0((__Instance + __PointerAdjustment));
                }

                public string TagName
                {
                    get
                    {
                        var __ret = Internal.getTagName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setTagName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint AttributesCount
                {
                    get
                    {
                        var __ret = Internal.getAttributesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class HTMLEndTagComment : CppSharp.Parser.AST.HTMLTagComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagComment10getTagNameEv")]
                    internal static extern global::System.IntPtr getTagName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagComment10setTagNameEPKc")]
                    internal static extern void setTagName_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new HTMLEndTagComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new HTMLEndTagComment((HTMLEndTagComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static HTMLEndTagComment __CreateInstance(HTMLEndTagComment.Internal native, bool skipVTables = false)
                {
                    return new HTMLEndTagComment(native, skipVTables);
                }

                private static HTMLEndTagComment.Internal* __CopyValue(HTMLEndTagComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.HTMLEndTagComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (HTMLEndTagComment.Internal*) ret;
                }

                private HTMLEndTagComment(HTMLEndTagComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLEndTagComment(HTMLEndTagComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.HTMLTagComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLEndTagComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLEndTagComment(CppSharp.Parser.AST.HTMLEndTagComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string TagName
                {
                    get
                    {
                        var __ret = Internal.getTagName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setTagName_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class TextComment : CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TextComment7getTextEv")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST11TextComment7setTextEPKc")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public static new TextComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new TextComment((TextComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static TextComment __CreateInstance(TextComment.Internal native, bool skipVTables = false)
                {
                    return new TextComment(native, skipVTables);
                }

                private static TextComment.Internal* __CopyValue(TextComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.TextComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TextComment.Internal*) ret;
                }

                private TextComment(TextComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TextComment(TextComment.Internal* native, bool skipVTables = false)
                    : base((CppSharp.Parser.AST.InlineContentComment.Internal*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TextComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TextComment(CppSharp.Parser.AST.TextComment _0)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class RawComment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.RawCommentKind Kind;

                    [FieldOffset(28)]
                    public global::System.IntPtr FullCommentBlock;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentC2ERKS2_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment7getTextEv")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment7setTextEPKc")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment12getBriefTextEv")]
                    internal static extern global::System.IntPtr getBriefText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment12setBriefTextEPKc")]
                    internal static extern void setBriefText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static RawComment __CreateInstance(global::System.IntPtr native, bool ownsNativeInstance = false, bool skipVTables = false)
                {
                    return new RawComment((RawComment.Internal*) native, skipVTables) { __ownsNativeInstance = ownsNativeInstance };
                }

                public static RawComment __CreateInstance(RawComment.Internal native, bool skipVTables = false)
                {
                    return new RawComment(native, skipVTables);
                }

                private static RawComment.Internal* __CopyValue(RawComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.RawComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (RawComment.Internal*) ret;
                }

                private RawComment(RawComment.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected RawComment(RawComment.Internal* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public RawComment()
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public RawComment(CppSharp.Parser.AST.RawComment _0)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
                    Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (!__ownsNativeInstance && disposing)
                        throw new global::System.InvalidOperationException("Managed instances owned by native code cannot be disposed of.");
                    CppSharp.Parser.AST.RawComment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    Internal.dtor_0((__Instance + __PointerAdjustment));
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string BriefText
                {
                    get
                    {
                        var __ret = Internal.getBriefText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setBriefText_0((__Instance + __PointerAdjustment), arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.RawCommentKind Kind
                {
                    get
                    {
                        return ((Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((Internal*) __Instance)->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.FullComment FullCommentBlock
                {
                    get
                    {
                        CppSharp.Parser.AST.FullComment __result0;
                        if (((Internal*) __Instance)->FullCommentBlock == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.Parser.AST.FullComment.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->FullCommentBlock))
                            __result0 = (CppSharp.Parser.AST.FullComment) CppSharp.Parser.AST.FullComment.NativeToManagedMap[((Internal*) __Instance)->FullCommentBlock];
                        else __result0 = CppSharp.Parser.AST.FullComment.__CreateInstance(((Internal*) __Instance)->FullCommentBlock);
                        return __result0;
                    }

                    set
                    {
                        ((Internal*) __Instance)->FullCommentBlock = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }
        }
    }
}
